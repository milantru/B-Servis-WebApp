@typeparam ItemType where ItemType : class, new()

<h3>@Title</h3>

@Form((SelectedItem, ReloadItemsAsync))

<ItemsTableLister ItemType="ItemType"
				  @ref="itemsLister"
				  @bind-SelectedItem="SelectedItem"
				  Title="@ListerTitle"
				  GetItemsAsync="GetItemsAsync"
				  GetItemsTotalCountAsync="GetItemsTotalCountAsync"
				  DeleteItemAsync="DeleteItemAsync"
				  Context="item">
	<HeadCols>
		@HeadCols
	</HeadCols>
	<BodyCols>
		@BodyCols(item)
	</BodyCols>
</ItemsTableLister>

@code {
	protected ItemsTableLister<ItemType> itemsLister = null!;

	[EditorRequired, Parameter]
	public RenderFragment<(ItemType SelectedItem, Func<Task> ReloadItemsAsync)> Form { get; set; } = null!;

	[EditorRequired, Parameter]
	public Func<int, int, Task<List<ItemType>>> GetItemsAsync { get; set; } = null!;

	[EditorRequired, Parameter]
	public Func<Task<int>> GetItemsTotalCountAsync { get; set; } = null!;

	[EditorRequired, Parameter]
	public Func<ItemType, Task> DeleteItemAsync { get; set; } = null!;

	[EditorRequired, Parameter]
	public RenderFragment HeadCols { get; set; } = null!;

	[EditorRequired, Parameter]
	public RenderFragment<ItemType> BodyCols { get; set; } = null!;

	[Parameter]
	public string Title { get; set; } = null!;

	[Parameter]
	public string ListerTitle { get; set; } = null!;

	public ItemType SelectedItem { get; protected set; } = new();

	public async Task ReloadItemsAsync()
	{
		await itemsLister.ReloadItemsAsync();
	}
}
