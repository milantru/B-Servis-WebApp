@inject IServISApi api

<div class="d-flex flex-wrap">
	<Virtualize @ref="excavatorPhotosContainer" ItemsProvider="LoadExcavatorsPhotosAsync" Context="ep">
		<ExcavatorCard Excavator="@ep.Excavator"
					   Image="@ep.Photo" 
					   OnDelete="() => DeleteExcavatorAsync(ep.Excavator)" />
	</Virtualize>
</div>

@code {
	private Virtualize<ExcavatorPhoto> excavatorPhotosContainer = null!;

	[Parameter]
	public ExcavatorType ExcavatorType { get; set; } = null!;

	public int ExcavatorsTotalCount { get; set; } // excavators of given category (ExcavatorCategory)

	public async Task ReloadExcavatorsPhotosAsync()
	{
		await excavatorPhotosContainer.RefreshDataAsync();
	}

	private async ValueTask<ItemsProviderResult<ExcavatorPhoto>> LoadExcavatorsPhotosAsync(ItemsProviderRequest request)
	{
		// number of excavators is equal to number of their title photos (each excavator has exactly 1 title photo)
		if (ExcavatorsTotalCount == 0)
		{
			ExcavatorsTotalCount = await api.GetExcavatorsCountAsync(ExcavatorType);
			if (ExcavatorsTotalCount == 0)
			{// in case there is no excavator in the database
				return new ItemsProviderResult<ExcavatorPhoto>();
			}
		}

		int excavatorsDisplayedCount = Math.Min(request.Count, ExcavatorsTotalCount - request.StartIndex);

		var excavators = await api.GetExcavatorsAsync(excavatorsDisplayedCount, request.StartIndex, ExcavatorType);

		var excavatorsTitlePhotos = new List<ExcavatorPhoto>(excavators.Count);
		foreach (var excavator in excavators)
		{
			var excavatorPhotos = excavator.Photos;
			foreach (var photo in excavatorPhotos)
			{
				if (photo.IsTitle)
				{
					excavatorsTitlePhotos.Add(photo);
					break;
				}
			}
		}

		return new ItemsProviderResult<ExcavatorPhoto>(excavatorsTitlePhotos, ExcavatorsTotalCount);
	}

	private async Task DeleteExcavatorAsync(Excavator excavator)
	{
		await api.DeleteExcavatorAsync(excavator);

		await ReloadExcavatorsPhotosAsync();
	}
}
