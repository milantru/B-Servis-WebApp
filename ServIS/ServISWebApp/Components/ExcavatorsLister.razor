@inject IServISApi api

<Virtualize ItemsProvider="LoadExcavatorsPhotosAsync" Context="e">
	<ExcavatorCard Title=@e.Excavator.Name
				   Image=@e.Photo />
</Virtualize>

@code {
	[Parameter]
	public string ExcavatorBrand { get; set; } = null!;

	[Parameter]
	public string ExcavatorCategory { get; set; } = null!;

	public int ExcavatorsTotalCount { get; set; } // excavators of given category (ExcavatorCategory)

	private async ValueTask<ItemsProviderResult<ExcavatorPhoto>> LoadExcavatorsPhotosAsync(ItemsProviderRequest request)
	{
		// number of excavators is equal to number of their title photos (each excavator has exactly 1 title photo)
		if (ExcavatorsTotalCount == 0)
		{
			ExcavatorsTotalCount = await api.GetTrackedExcavatorsCountAsync();
		}
		if (ExcavatorsTotalCount == 0)
		{// in case there is no tracked excavator in the database
			return new ItemsProviderResult<ExcavatorPhoto>();
		}

		int excavatorsDisplayedCount = Math.Min(request.Count, ExcavatorsTotalCount - request.StartIndex);

		var excavators = await api.GetExcavatorsAsync(
				excavatorsDisplayedCount, request.StartIndex, ExcavatorCategory, ExcavatorBrand
		);

		var excavatorTitlePhotos = new List<ExcavatorPhoto>();
		foreach (var excavator in excavators)
		{
			var excavatorPhoto = await api.GetExcavatorTitlePhotoAsync(excavator.Id);
			if (excavatorPhoto == null) {
				// possible TODO: if photo is not available (e.g. due to some error, some "not found error" photo from wwwroot can be displayed instead)
				throw new Exception("Missing Excavator photo.");
			}
			excavatorPhoto.Excavator = excavator;
			excavatorTitlePhotos.Add(excavatorPhoto);
		}

		return new ItemsProviderResult<ExcavatorPhoto>((IEnumerable<ExcavatorPhoto>)excavatorTitlePhotos, ExcavatorsTotalCount);
	}
}
