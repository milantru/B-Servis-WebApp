@inject IServISApi api

@if (Title != null)
{
	<h3>@Title</h3>
}

<div class="d-flex flex-wrap">
	<Virtualize @ref="excavatorPhotosContainer" ItemsProvider="LoadExcavatorsAsync" Context="excavator">
		<ExcavatorCard Excavator="excavator"
					   OnDelete="async () => await DeleteExcavatorAsync(excavator)" />
	</Virtualize>
</div>

@code {
	private Virtualize<Excavator> excavatorPhotosContainer = null!;

	[Parameter]
	public ExcavatorType ExcavatorType { get; set; } = null!;

	[Parameter]
	public string Title { get; set; } = null!;

	public int ExcavatorsTotalCount { get; set; } // excavators of given type (ExcavatorType)

	public async Task ReloadExcavatorsPhotosAsync()
	{
		await excavatorPhotosContainer.RefreshDataAsync();
	}

	private async ValueTask<ItemsProviderResult<Excavator>> LoadExcavatorsAsync(ItemsProviderRequest request)
	{
		if (ExcavatorsTotalCount == 0)
		{
			ExcavatorsTotalCount = await api.GetExcavatorsCountAsync(ExcavatorType);
			if (ExcavatorsTotalCount == 0)
			{// in case there is no excavator in the database
				return new ItemsProviderResult<Excavator>();
			}
		}

		int excavatorsDisplayedCount = Math.Min(request.Count, ExcavatorsTotalCount - request.StartIndex);

		var excavators = await api.GetExcavatorsAsync(excavatorsDisplayedCount, request.StartIndex, ExcavatorType);

		return new ItemsProviderResult<Excavator>(excavators, ExcavatorsTotalCount);
	}

	private async Task DeleteExcavatorAsync(Excavator excavator)
	{
		await api.DeleteExcavatorAsync(excavator);

		await ReloadExcavatorsPhotosAsync();
	}
}
