@inject IServISApi api
@inject SfDialogService dialogService
@using ServISData.DataOperations

@if (Title is not null)
{
	<h3>@Title</h3>
}

@if (Excavators is null)
{
	<p>Načítava sa...</p>
}
else if (Excavators.Count == 0)
{
	<p>Momentálne neexistujú žiadne stroje požadovaného typu.</p>
}
else
{
	<div class="w-100 d-flex flex-wrap justify-content-around">
		@foreach (var excavator in Excavators)
		{
			<ExcavatorCard Excavator="excavator"
						   OnDelete="async () => await DeleteExcavatorAsync(excavator)" />
		}
	</div>
}

@code {
	[Parameter]
	public string Title { get; set; } = null!;

	[Parameter]
	public ExcavatorType ExcavatorType { get; set; } = null!;

	private List<Excavator> Excavators { get; set; } = null!; // excavators of given type (ExcavatorType)

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		await InitExcavatorsAsync();
	}

	private async Task InitExcavatorsAsync()
	{
		var dataOperations = new MyDataOperations<Excavator>(
			new MyDataOperations<Excavator>.Configuration()
			{
				SpecialOperations = excavators => excavators.Where(e => e.Type.Id == ExcavatorType.Id && !e.IsForAuctionOnly)
			}
		);

		Excavators = await api.GetExcavatorsAsync(dataOperations);
	}

	private async Task DeleteExcavatorAsync(Excavator excavator)
	{
		var dialogButtonOptions = new DialogButtonOptions { Content = "Zrušiť" };
		var dialogOptions = new DialogOptions
			{
				ShowCloseIcon = true,
				CancelButtonOptions = dialogButtonOptions
			};
		var isDeletionConfirmed = await dialogService.ConfirmAsync(
			content: "Naozaj chcete tento stroj vymazať natrvalo?",
			title: "Vymazať stroj natrvalo",
			options: dialogOptions
		);
		if (!isDeletionConfirmed)
		{
			return;
		}

		await api.DeleteExcavatorAsync(excavator);

		Excavators.Remove(excavator);
	}
}
