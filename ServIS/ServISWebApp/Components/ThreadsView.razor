@inject Modals modals
@using MailKit;

@if (Threads is null)
{
	<p>Načítava sa...</p>
}
else if (Threads.Count == 0)
{
	<div>
		<ReloadIconButton IsReloading="@IsLoadingThreads" OnClick="OnReload" />

		<p>Nemáte žiadne správy.</p>
	</div>
}
else
{
	<div>
		<div class="btns">
			<CheckSquareIconButton UseMinus="@(CheckedThreads.Count > 0 && CheckedThreads.Count < Threads.Count)" 
								   OnClick="CheckUncheckAllThreads" />
			<ReloadIconButton IsReloading="@IsLoadingThreads" OnClick="OnReload" />
	
			@if (CheckedThreads.Count > 0)
			{
				var isReplyInProgressInAnyOfCheckedThreads = IsReplyInProgressInAnyOfCheckedThreads();

				<DeleteIconButton IsDisabled="@(isReplyInProgressInAnyOfCheckedThreads || IsLoadingThreads)"
								  OnClick="DeleteSelectedThreadsAsync" />

				@* It is ok to cast to bool, null is returned only if 
				   there are no checked threads, but we check it here in if. *@
				<MarkAsReadUnreadIconButton IsDisabled="@(isReplyInProgressInAnyOfCheckedThreads || IsLoadingThreads)"
											ShowOpenEnvelopeIcon="@((bool)ShouldMarkAsRead()!)" 
											OnClick="MarkAsReadUnreadAsync" />
			}
		</div>
		<div class="thread-rows">
			@for (int i = Threads.Count - 1; i >= 0; i--)
			{
				var thread = Threads[i];
				<ThreadRow Thread="@thread"
						   IsChecked="@(CheckedThreads.Contains(thread))"
						   EmailManager="@EmailManager"
						   OnClick="async () => await OnThreadClick.InvokeAsync(thread)" 
						   OnCheckUncheck="() => CheckUncheckThread(thread)" />
			}
		</div>
	</div>
}

@code {
	[Parameter]
	public List<Thread> Threads { get; set; } = null!;

	[Parameter]
	public EventCallback<List<Thread>> ThreadsChanged { get; set; }

	[Parameter]
	public bool IsLoadingThreads { get; set; }

	[Parameter]
	public EmailManager EmailManager { get; set; } = null!;

	[Parameter]
	public EventCallback<Thread> OnThreadClick { get; set; }

	[Parameter]
	public EventCallback OnReload { get; set; }

	[Parameter]
	public EventCallback OnDelete { get; set; }

	private List<Thread> CheckedThreads { get; set; } = new();

	private void CheckUncheckThread(Thread thread)
	{
		if (CheckedThreads.Contains(thread))
		{
			CheckedThreads.Remove(thread);
		}
		else
		{
			CheckedThreads.Add(thread);
		}
	}

	private void CheckUncheckAllThreads()
	{
		if (CheckedThreads.Count == 0)
		{
			CheckedThreads.AddRange(Threads);
		}
		else
		{
			CheckedThreads.Clear();
		}
	}

	private async Task DeleteSelectedThreadsAsync()
	{
		var isDeletionConfirmed = await modals.DisplayConfirmationAsync(
			confirmationMessage: "Naozaj chcete vymazať všetky vybrané správy?",
			title: "Vymazanie vybraných správ"
		);
		if (!isDeletionConfirmed)
		{
			return;
		}

		var deleteEmailsTasks = new List<Task>(CheckedThreads.Count);

		foreach (var thread in CheckedThreads)
		{
			var uids = thread.Messages.Select(m => m.Uid).ToList();

			var deleteEmailsTask = EmailManager.DeleteEmailAsync(uids);

			deleteEmailsTasks.Add(deleteEmailsTask);

			Threads.Remove(thread);
		}
		CheckedThreads.Clear();

		await ThreadsChanged.InvokeAsync(Threads);

		await Task.WhenAll(deleteEmailsTasks);

		await OnDelete.InvokeAsync();
	}

	/// <summary>
	/// Decides whether we should mark checked thread(s) as read or unread.
	/// </summary>
	/// <returns>
	/// <c>null</c> if no thread is checked; 
	/// otherwise <c>true</c> if thread(s) should be marked as read; <c>false</c> if thread(s) should be marked as unread
	/// </returns>
	private bool? ShouldMarkAsRead()
	{
		if (CheckedThreads.Count == 0)
		{// there is no message to be marked as (un)read
			return null;
		}

		bool firstThreadIsRead = CheckedThreads.First().IsRead;

		for (int i = 1; i < CheckedThreads.Count; i++)
		{
			var ithThreadIsRead = CheckedThreads.ElementAt(i).IsRead;

			if (firstThreadIsRead != ithThreadIsRead)
			{
				return true;
			}
		}

		return !firstThreadIsRead;
	}

	private async Task MarkAsReadUnreadAsync()
	{
		var shouldMarkAsRead = ShouldMarkAsRead();
		if (!shouldMarkAsRead.HasValue)
		{
			return;
		}

		var markEmailAsReadOrUnreadTasks = new List<Task>();

		foreach (var thread in CheckedThreads)
		{
			if (shouldMarkAsRead.Value == thread.IsRead)
			{
				/* If we want to mark message as read and it is already read, 
				 * then why bother sending request for marking it as read 
				 * (the same goes for unread). */
				continue;
			}
			thread.IsRead = shouldMarkAsRead.Value;

			var lastEmail = thread.Messages.Last();
			Task markEmailAsReadOrUnreadTask;

			if (shouldMarkAsRead.Value)
			{
				if (thread.Messages.Count > 1 && !thread.Messages[thread.Messages.Count - 2].IsRead)
				{
					/* Special case...
					 * Normally, when we only use the app, looking at and marking the last message is enough.
					 * But imagine situation... There are multiple emails in the same thread
					 * that are unread. In the app we check the thread and mark it as read. In the app everything
					 * should look fine. However, IF we decide to look at gmail we might see something weird.
					 * The last message in the thread is read but the previous ones (of the same thread) are unread.
					 * And this behavior is not desired. Thus, this special case if statement was made...
					 * If the last message of the thread should be marked as read and the previous (the penultimate) one
					 * is already read then only the last one needs to be marked, but if it is NOT read then we
					 * mark every message in the thread as read.
					 *
					 * This special case needs to be solved only when we are marking as read, marking as unread doesn't
					 * need this behavior because when we mark checked thread (message) as unread, only the last message
					 * is marked as unread (it is sufficient, this is how the app works, and it doesn't look weird on gmail). */
					var markEmailsAsReadTask = EmailManager.MarkEmailAsReadAsync(thread.Messages);

					markEmailAsReadOrUnreadTasks.Add(markEmailsAsReadTask);
					continue;
				}

				markEmailAsReadOrUnreadTask = EmailManager.MarkEmailAsReadAsync(lastEmail);
			}
			else
			{
				markEmailAsReadOrUnreadTask = EmailManager.MarkEmailAsUnreadAsync(lastEmail);
			}

			markEmailAsReadOrUnreadTasks.Add(markEmailAsReadOrUnreadTask);
		}

		await ThreadsChanged.InvokeAsync(Threads);

		await Task.WhenAll(markEmailAsReadOrUnreadTasks);
	}

	private bool IsReplyInProgressInAnyOfCheckedThreads() => CheckedThreads.Any(ct => !ct.Messages.Last().Uid.IsValid);
}
