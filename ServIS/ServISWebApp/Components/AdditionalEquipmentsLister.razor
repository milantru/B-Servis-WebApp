@inject IServISApi api
@inject Modals modals
@using ServISData.DataOperations

@if (Title != null)
{
	<h3>@Title</h3>
}

<div class="w-100 d-flex flex-wrap justify-content-around">
	@foreach (var ae in AdditionalEquipments)
	{
		<AdditionalEquipmentCard AdditionalEquipment="ae"
								 OnDelete="async () => await DeleteAdditionalEquipmentAsync(ae)" />
	}
</div>

@code {
	[Parameter]
	public string Title { get; set; } = null!;

	[Parameter]
	public AdditionalEquipmentBrand AdditionalEquipmentBrand { get; set; } = null!;

	[Parameter]
	public AdditionalEquipmentCategory AdditionalEquipmentCategory { get; set; } = null!;

	[Parameter]
	public ExcavatorCategory AdditionalEquipmentExcavatorCategory { get; set; } = null!;

	private List<AdditionalEquipment> AdditionalEquipments { get; set; } = null!;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		await InitAdditionalEquipmentsAsync();
	}

	private async Task InitAdditionalEquipmentsAsync()
	{
		var dataOperations = new DataOperations<AdditionalEquipment>(
			new DataOperations<AdditionalEquipment>.Configuration
				{
					SpecialOperations = (items) => items.Where(item =>
						AdditionalEquipmentCategory == null ? true : item.Category.Id == AdditionalEquipmentCategory.Id
						&& AdditionalEquipmentBrand == null ? true : item.Brand.Id == AdditionalEquipmentBrand.Id
						&& AdditionalEquipmentExcavatorCategory == null ? true : item.ExcavatorCategory.Id == AdditionalEquipmentExcavatorCategory.Id
				)
				}
		);

		AdditionalEquipments = await api.GetAdditionalEquipmentsAsync(dataOperations);
	}

	private async Task DeleteAdditionalEquipmentAsync(AdditionalEquipment additionalEquipment)
	{
		var isDeletionConfirmed = await modals.DisplayConfirmationAsync(
			confirmationMessage: "Naozaj chcete toto prídavné zariadenie vymazať natrvalo?",
			title: "Vymazať prídavné zariadenie natrvalo"
		);
		if (!isDeletionConfirmed)
		{
			return;
		}

		await api.DeleteAdditionalEquipmentAsync(additionalEquipment);

		AdditionalEquipments.Remove(additionalEquipment);
	}
}
