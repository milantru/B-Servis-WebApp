@inject IServISApi api

@if (Title != null)
{
	<h3>@Title</h3>
}

<div class="d-flex flex-wrap justify-content-between">
	<Virtualize @ref="additionalEquipmentPhotosContainer" ItemsProvider="LoadAdditionalEquipmentsAsync" Context="ae">
		<AdditionalEquipmentCard AdditionalEquipment="ae"
								 OnDelete="async () => await DeleteAdditionalEquipmentAsync(ae)" />
	</Virtualize>
</div>

@code {
	private Virtualize<AdditionalEquipment> additionalEquipmentPhotosContainer = null!;

	[Parameter]
	public string Title { get; set; } = null!;

	[Parameter]
	public AdditionalEquipmentBrand AdditionalEquipmentBrand { get; set; } = null!;

	[Parameter]
	public AdditionalEquipmentCategory AdditionalEquipmentCategory { get; set; } = null!;

	[Parameter]
	public ExcavatorCategory AdditionalEquipmentExcavatorCategory { get; set; } = null!;

	public int AdditionalEquipmentsTotalCount { get; set; }

	public async Task ReloadAdditionalEquipmentPhotosAsync()
	{
		await additionalEquipmentPhotosContainer.RefreshDataAsync();
	}

	private async ValueTask<ItemsProviderResult<AdditionalEquipment>> LoadAdditionalEquipmentsAsync(ItemsProviderRequest request)
	{
		if (AdditionalEquipmentsTotalCount == 0)
		{
			AdditionalEquipmentsTotalCount = await api.GetAdditionalEquipmentsCountAsync();
			if (AdditionalEquipmentsTotalCount == 0)
			{// in case there is no additional equipment in the database
				return new ItemsProviderResult<AdditionalEquipment>();
			}
		}

		int additionalEquipmentsDisplayedCount = Math.Min(request.Count, AdditionalEquipmentsTotalCount - request.StartIndex);

		var additionalEquipments = await api.GetAdditionalEquipmentsAsync(
				additionalEquipmentsDisplayedCount,
				request.StartIndex,
				AdditionalEquipmentExcavatorCategory,
				AdditionalEquipmentCategory,
				AdditionalEquipmentBrand
		);

		return new ItemsProviderResult<AdditionalEquipment>(additionalEquipments, AdditionalEquipmentsTotalCount);
	}

	private async Task DeleteAdditionalEquipmentAsync(AdditionalEquipment additionalEquipment)
	{
		await api.DeleteAdditionalEquipmentAsync(additionalEquipment);

		await ReloadAdditionalEquipmentPhotosAsync();
	}
}
