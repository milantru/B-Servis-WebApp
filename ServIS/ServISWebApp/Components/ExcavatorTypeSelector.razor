@inject IServISApi api

<h4>Typy strojov:</h4>

@if (AllExcavatorTypes == null)
{
	<p>Načítava sa...</p>
}
else if (AllExcavatorTypes.Count == 0)
{
	<p>Žiadne typy strojov.</p>
}
else
{
	@if (ExcavatorType != null)
	{
		<InputSelect Value="ExcavatorType.Id"
					 ValueExpression="() => ExcavatorType.Id"
					 ValueChanged="async (int excavatorTypeId) => await UpdateExcavatorType(excavatorTypeId)">
			@if (AllExcavatorTypes == null)
			{
				<p>Načítava sa...</p>
			}
			else
			{
				@foreach (var excavatorType in AllExcavatorTypes)
				{
					<option value="@excavatorType.Id">@excavatorType.Category (@excavatorType.Brand)</option>
				}
			}
		</InputSelect>
	}
}

@code {
	[Parameter]
	public ExcavatorType ExcavatorType { get; set; } = null!;

	[Parameter]
	public EventCallback<ExcavatorType> ExcavatorTypeChanged { get; set; }

	private List<ExcavatorType> AllExcavatorTypes { get; set; } = null!;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		if (ExcavatorType == null)
		{
			throw new Exception($"Parameter '{nameof(ExcavatorType)}' not provided.");
		}
	}

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllExcavatorTypes = await api.GetExcavatorTypesAsync();
	}

	private async Task UpdateExcavatorType(int excavatorTypeId)
	{
		ExcavatorType = AllExcavatorTypes.FirstOrDefault(t => t.Id == excavatorTypeId)!;
		await ExcavatorTypeChanged.InvokeAsync(ExcavatorType);
	}
}
