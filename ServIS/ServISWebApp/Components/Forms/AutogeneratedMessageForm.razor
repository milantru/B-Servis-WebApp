@inherits FormBase<AutogeneratedMessage>
@inject IServISApi api
@inject IJSRuntime js
@using ServISData
@using ServISWebApp.CssProviders

@if (AutogeneratedMessage is not null)
{
	<EditForm Model="AutogeneratedMessage" OnValidSubmit="SaveItemAsync">
		<DataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<h4><b>@AutogeneratedMessage.ForWhom.GetLabel()</b></h4>

		<InputText @bind-Value="AutogeneratedMessage.Subject" placeholder="@AutogeneratedMessage.ForWhom.GetDefaultSubject()" />

		<div>
			<InputTextArea @bind-Value="AutogeneratedMessage.Message" placeholder="@AutogeneratedMessage.ForWhom.GetDefaultMessage()" />
			<ul>
				@foreach (var tag in AutogeneratedMessage.ForWhom.GetTags())
				{
					<li>@tag</li>
				}
			</ul>
		</div>

		<SubmitButton Text="Uložiť" />
		<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
	</EditForm>
}
else
{
	<p>Načítava sa...</p>
}

@code {
	[Parameter]
	public AutogeneratedMessage AutogeneratedMessage { get; set; } = null!;

	public static IReadOnlyDictionary<string, Func<AuctionSummary, string>> Tags { get; } =
		new Dictionary<string, Func<AuctionSummary, string>>()
		{
			{ "#nazov_stroja", x => x.AuctionOffer.Excavator.Name },
			{ "#pociatocna_cena", x => x.AuctionOffer.StartingBid.ToString() },
			{ "#max_ponuka", x => x.WinningBid?.Bid.ToString() ?? "-" },
			{ "#ponuknuta_cena", x => x.Bid?.Bid.ToString() ?? "-" },
			{ "#meno_vyhercu", x => x.WinningBid is not null ? $"{x.WinningBid.User.Name} {x.WinningBid.User.Surname}" : "-" },
			{ "#mobil_vyhercu", x => x.WinningBid is not null ? (x.WinningBid.User?.PhoneNumber ?? "Neposkytol") : "-" },
			{ "#email_vyhercu", x => x.WinningBid?.User.Email ?? "-" },
			{ "#bydlisko_vyhercu", x => x.WinningBid is not null ? (x.WinningBid.User.Residence ?? "Neposkytol") : "-" },
			{ "#meno_ucastnika", x => x.Bid is not null ? $"{x.Bid.User.Name} {x.Bid.User.Surname}" : "-"},
			{ "#mobil_ucastnika", x => x.Bid is not null ? (x.Bid.User?.PhoneNumber ?? "Neposkytol") : "-" },
			{ "#email_ucastnika", x => x.Bid?.User.Email ?? "-" },
			{ "#bydlisko_ucastnika", x => x.Bid is not null ? (x.Bid.User.Residence ?? "Neposkytol") : "-" }

		};

	public override async Task ResetAsync()
	{
		AutogeneratedMessage.Subject = string.Empty;
		AutogeneratedMessage.Message = string.Empty;

		await Task.CompletedTask;
	}

	public override async Task SaveItemAsync()
	{
		try
		{
			await api.SaveAutogeneratedMessageAsync(AutogeneratedMessage);
		}
		catch
		{
			throw new Exception($"Couldn't save autogenerated message with id {AutogeneratedMessage.Id}");
		}

		await js.InvokeVoidAsync("alert", "Úspešne uložené.");
	}
}
