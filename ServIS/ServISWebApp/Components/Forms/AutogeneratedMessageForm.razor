@inherits FormBase<AutogeneratedMessage>
@inject IJSRuntime js
@inject ILogger<AutogeneratedMessageForm> logger
@inject IServISApi api
@using ServISData
@using ServISWebApp.CssProviders

@if (AutogeneratedMessage is not null)
{
	<div class="form">
		<EditForm Model="AutogeneratedMessage" OnValidSubmit="SaveItemAsync">
			<DataAnnotationsValidator />
			<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

			<div>
				<h4><b>@AutogeneratedMessage.ForWhom.GetLabel()</b></h4>
			</div>

			<div class="d-flex">
				<div class="w-75 text-inputs">
					<label>
						Predmet:
						<InputText @bind-Value="AutogeneratedMessage.Subject" placeholder="@AutogeneratedMessage.ForWhom.GetDefaultSubject()" />
					</label>

					<label>
						Správa:
						<InputTextArea @bind-Value="AutogeneratedMessage.Message" class="message" placeholder="@AutogeneratedMessage.ForWhom.GetDefaultMessage()" rows="10" />
					</label>
				</div>

				<div class="w-25 tags">
					<ul>
						@foreach (var tag in AutogeneratedMessage.ForWhom.GetTags())
						{
							<li>@tag</li>
						}
					</ul>
				</div>
			</div>

			<div>
				<SubmitButton Text="Uložiť" />
				<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
			</div>
		</EditForm>
	</div>
}
else
{
	<p>Načítava sa...</p>
}

@code {
	[Parameter]
	public AutogeneratedMessage AutogeneratedMessage { get; set; } = null!;

	public static IReadOnlyDictionary<string, Func<AuctionSummary, string>> Tags { get; } =
		new Dictionary<string, Func<AuctionSummary, string>>()
		{
			{ "#nazov_bagra", x => x.AuctionOffer.Excavator.Name },
			{ "#pociatocna_cena", x => x.AuctionOffer.StartingBid.ToString() },
			{ "#max_ponuka", x => x.WinningBid?.Bid.ToString() ?? "-" },
			{ "#ponuknuta_cena", x => x.Bid?.Bid.ToString() ?? "-" },
			{ "#meno_vyhercu", x => x.WinningBid is not null ? $"{x.WinningBid.User.Name} {x.WinningBid.User.Surname}" : "-" },
			{ "#mobil_vyhercu", x => x.WinningBid is not null ? (x.WinningBid.User?.PhoneNumber ?? "Neposkytol") : "-" },
			{ "#email_vyhercu", x => x.WinningBid?.User.Email ?? "-" },
			{ "#bydlisko_vyhercu", x => x.WinningBid is not null ? (x.WinningBid.User.Residence ?? "Neposkytol") : "-" },
			{ "#meno_ucastnika", x => x.Bid is not null ? $"{x.Bid.User.Name} {x.Bid.User.Surname}" : "-"},
			{ "#mobil_ucastnika", x => x.Bid is not null ? (x.Bid.User?.PhoneNumber ?? "Neposkytol") : "-" },
			{ "#email_ucastnika", x => x.Bid?.User.Email ?? "-" },
			{ "#bydlisko_ucastnika", x => x.Bid is not null ? (x.Bid.User.Residence ?? "Neposkytol") : "-" }

		};

	public override async Task ResetAsync()
	{
		AutogeneratedMessage.Subject = string.Empty;
		AutogeneratedMessage.Message = string.Empty;

		await Task.CompletedTask;
	}

	public override async Task SaveItemAsync()
	{
		try
		{
			await api.SaveAutogeneratedMessageAsync(AutogeneratedMessage);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"Couldn't save autogenerated message with id {AutogeneratedMessage.Id}");
		}

		await js.InvokeVoidAsync("alert", "Úspešne uložené.");
	}
}
