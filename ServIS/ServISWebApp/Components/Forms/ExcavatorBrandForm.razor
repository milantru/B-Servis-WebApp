@inherits FormBase<ExcavatorBrand>
@inject ILogger<ExcavatorBrandForm> logger
@inject IServISApi api
@using ServISWebApp.CssProviders

<EditForm Model="@Item" OnValidSubmit="SaveItemAsync" class="form-space-items">
	<DataAnnotationsValidator />
	<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

	<div class="form-group">
		<label for="excavator-brand">Názov značky:</label>
		<InputText @bind-Value="Item.Brand" id="excavator-brand" />
		<ValidationMessage For="@(() => Item.Brand)" />
	</div>

	<div>
		<SubmitButton Text="Uložiť" />
		<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
	</div>
</EditForm>

@code {
	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}
	}

	public override async Task ResetAsync()
	{
		Item = new();

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}
	}

	public override async Task SaveItemAsync()
	{
		try
		{
			await api.SaveExcavatorBrandAsync(Item);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"Failed to save excavator brand with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}

		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}
}
