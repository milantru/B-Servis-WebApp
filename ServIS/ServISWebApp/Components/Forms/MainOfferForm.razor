@inherits FormBase<MainOffer>
@inject IServISApi api
@inject IJSRuntime js
@using ServISWebApp.CssProviders
@using ServISData.Interfaces

@if (Item != null && Item.ExcavatorType != null)
{
	<EditForm Model="@Item" OnValidSubmit="SaveItemAsync" class="form-space-items">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<div class="form-group">
			<InputFile OnChange="HandleInputFileChangeAsync" />
			<div>
				Nahraná fotka:<br />

				@if (Item.Photo == null)
				{
					<p>Nie je nahraná žiadná fotka.</p>
				}
				else
				{
					<img src="@FileTools.GetDataUrlBase64String(Item.Photo, "image/jpeg")" width="280" />
				}
			</div>
		</div>

		<div class="form-group">
			<label for="excavator-type">Typy strojov:</label>
			<ItemsSelector ItemType="ExcavatorType" 
						   @bind-SelectedItem="Item.ExcavatorType"
						   Items="@ExcavatorTypes"
						   Context="excavatorType"
						   id="excavator-type">
				<OptionText>@excavatorType.Category.Category (@excavatorType.Brand.Brand)</OptionText>
			</ItemsSelector>
		</div>

		<div class="form-group">
			<label for="description">Popis:</label>
			<InputTextArea @bind-Value="Item.Description" id="description" />
			<ValidationMessage For="@(() => Item.Description)" />
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
		</div>
	</EditForm>
}

@code {
	private List<ExcavatorType> ExcavatorTypes { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		try
		{
			ExcavatorTypes = await api.GetExcavatorTypesAsync();
		}
		catch
		{
			throw new Exception("Error retrieving excavator types.");
		}
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}

		if (Item.Id == 0)
		{
			InitMainOffer(Item);
		}
	}

	public override async Task ResetAsync()
	{
		Item = new MainOffer();
		InitMainOffer(Item);

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}
	}

	public override async Task SaveItemAsync()
	{
		try
		{
			await api.SaveMainOfferAsync(Item);
		}
		catch
		{
			throw new Exception($"Failed to save main offer with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}

		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}

	private async Task HandleInputFileChangeAsync(InputFileChangeEventArgs e)
	{
		var uploadedFile = e.File;

		if (!uploadedFile.IsValidImageFile(out string? errorMessage))
		{
			await js.InvokeVoidAsync("alert", errorMessage);
			return;
		}

		var dataBytes = await uploadedFile.GetDataBytesAsync();
		if (dataBytes == null)
		{
			throw new Exception("Something went wrong with uploading photo.");
		}

		Item.Photo = dataBytes;

		StateHasChanged();
	}

	private static void InitMainOffer(MainOffer mainOffer)
	{
		mainOffer.ExcavatorType ??= new();
	}
}
