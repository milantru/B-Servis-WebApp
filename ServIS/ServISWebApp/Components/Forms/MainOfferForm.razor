@using ServISWebApp.CssProviders
@using ServISData.Interfaces
@inject IServISApi api
@inject IJSRuntime js

@if (MainOffer != null && MainOffer.ExcavatorType != null)
{
	<EditForm EditContext="@editContext" Model="MainOffer" OnValidSubmit="SaveMainOfferAsync" class="form-space-items">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<div class="form-group">
			<InputFile OnChange="HandleInputFileChangeAsync" />
			<div>
				Nahraná fotka:<br />

				@if (MainOffer.Photo == null)
				{
					<p>Nie je nahraná žiadná fotka.</p>
				}
				else
				{
					<img src="@FileTools.GetDataUrlBase64String(MainOffer.Photo, "image/jpeg")" width="280" />
				}
			</div>
		</div>

		<div class="form-group">
			<label for="excavator-type">Typy strojov:</label>
			<ItemsSelector ItemType="ExcavatorType" 
						   @bind-SelectedItem="MainOffer.ExcavatorType"
						   Items="ExcavatorTypes"
						   Context="excavatorType"
						   id="excavator-type">
				<OptionText>@excavatorType.Category.Category (@excavatorType.Brand.Brand)</OptionText>
			</ItemsSelector>
		</div>

		<div class="form-group">
			<label for="description">Popis:</label>
			<InputTextArea @bind-Value="MainOffer.Description" id="description" />
			<ValidationMessage For="@(() => MainOffer.Description)" />
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="reset" @onclick="async () => await ResetAsync()">Reset</button>
		</div>
	</EditForm>
}

@code {
	private EditContext editContext = null!;

	[Parameter]
	public MainOffer MainOffer { get; set; } = null!;

	[Parameter]
	public EventCallback<MainOffer> MainOfferChanged { get; set; }

	[Parameter]
	public EventCallback AfterValidSubmit { get; set; }

	private List<ExcavatorType> ExcavatorTypes { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		try
		{
			ExcavatorTypes = await api.GetExcavatorTypesAsync();
		}
		catch
		{
			throw new Exception("Error retrieving excavator types.");
		}
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (MainOffer == null)
		{
			throw new Exception($"Parameter '{nameof(MainOffer)}' not provided.");
		}

		if (MainOffer.Id == 0 && MainOffer.ExcavatorType == null)
		{
			MainOffer.ExcavatorType = new();
		}
	}

	private async Task HandleInputFileChangeAsync(InputFileChangeEventArgs e)
	{
		var uploadedFile = e.File;

		if (!uploadedFile.IsValidImageFile(out string? errorMessage))
		{
			await js.InvokeVoidAsync("alert", errorMessage);
			return;
		}

		var dataBytes = await uploadedFile.GetDataBytesAsync();
		if (dataBytes == null)
		{
			throw new Exception("Something went wrong with uploading photo.");
		}

		MainOffer.Photo = dataBytes;

		StateHasChanged();
	}

	private async Task ResetAsync()
	{
		MainOffer = new MainOffer { ExcavatorType = new() };

		await MainOfferChanged.InvokeAsync(MainOffer);
	}

	private async Task SaveMainOfferAsync()
	{
		try
		{
			await api.SaveMainOfferAsync(MainOffer);
		}
		catch
		{
			throw new Exception($"Failed to save main offer with id '{MainOffer.Id}'.");
		}

		if (AfterValidSubmit.HasDelegate)
		{
			await AfterValidSubmit.InvokeAsync();
		}

		await ResetAsync();
	}
}
