@inject IServISApi api
@using ServISData
@using ServISWebApp.CssProviders

@if (PropertyType != null)
{
	<EditForm Model="PropertyType" OnValidSubmit="SaveExcavatorPropertyTypeAsync" class="form-space-items">
		<DataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<div class="form-group">
			<label for="name">Názov vlastnosti:</label>
			<InputText @bind-Value="PropertyType.Name" id="name" />
			<ValidationMessage For="@(() => PropertyType.Name)" />
		</div>

		<div class="form-group">
			<label for="property-type">Typ vlastnosti:</label>
			<InputSelect @bind-Value="PropertyType.InputType" id="property-type">
				@if (InputTypes == null)
				{
					<p>Načítava sa...</p>
				}
				else
				{
					@foreach (var inputType in InputTypes)
					{
						<option value="@inputType">@inputType.GetLabel()</option>
					}
				}
			</InputSelect>
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="button" @onclick="async () => await ResetAsync()">Reset</button>
		</div>
	</EditForm>
}

@code {
	[Parameter]
	public ExcavatorPropertyType PropertyType { get; set; } = null!;

	[Parameter]
	public EventCallback<ExcavatorPropertyType> PropertyTypeChanged { get; set; }

	[Parameter]
	public EventCallback AfterValidSubmit { get; set; }

	private InputType[] InputTypes { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		InputTypes = Enum.GetValues<InputType>()
			.Skip(1) // we skip the 'InputType.Unset'
			.ToArray();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (PropertyType == null)
		{
			throw new Exception($"Parameter '{nameof(PropertyType)}' not provided.");
		}

		if (PropertyType.Id == 0 && PropertyType.ExcavatorTypesWithThisProperty == null)
		{
			PropertyType.ExcavatorTypesWithThisProperty = new List<ExcavatorType>();
		}
	}

	private async Task ResetAsync()
	{
		PropertyType = new();

		await PropertyTypeChanged.InvokeAsync(PropertyType);
	}

	private async Task SaveExcavatorPropertyTypeAsync()
	{
		try
		{
			await api.SaveExcavatorPropertyTypeAsync(PropertyType);
		}
		catch
		{
			throw new Exception($"Failed to save excavator property type with id '{PropertyType.Id}'.");
		}

		if (AfterValidSubmit.HasDelegate)
		{
			await AfterValidSubmit.InvokeAsync();
		}

		await ResetAsync();
	}
}
