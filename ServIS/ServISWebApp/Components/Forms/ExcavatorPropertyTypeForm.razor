@implements IDisposable
@inherits FormBase<ExcavatorPropertyType>
@inject ILogger<ExcavatorPropertyTypeForm> logger
@inject IServISApi api
@using ServISData
@using ServISWebApp.CssProviders

@if (Item != null)
{
	<EditForm EditContext="@editContext" OnValidSubmit="SaveItemAsync" class="form-space-items">
		<DataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<div class="form-group">
			<label for="name">Názov vlastnosti:</label>
			<InputText @bind-Value="Item.Name" id="name" />
			<ValidationMessage For="@(() => Item.Name)" />
		</div>

		<div class="form-group">
			<label for="property-type">Typ vlastnosti:</label>
			<InputSelect @bind-Value="Item.InputType" id="property-type">
				@if (InputTypes == null)
				{
					<p>Načítava sa...</p>
				}
				else
				{
					@foreach (var inputType in InputTypes)
					{
						<option value="@inputType">@inputType.GetLabel()</option>
					}
				}
			</InputSelect>
			<ValidationMessage For="@(() => Item.InputType)" />
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="button" @onclick="ResetAsync">Reset</button>
		</div>
	</EditForm>
}

@code {
	private InputType[] InputTypes { get; set; } = null!;
	private EditContext editContext = null!;
	private ValidationMessageStore messageStore = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		InputTypes = Enum.GetValues<InputType>()
			.Skip(1) // we skip the 'InputType.Unset'
			.ToArray();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}

		if (Item.Id == 0)
		{
			InitExcavatorPropertyType(Item);
		}

		InitEditContext();
	}

	public override async Task ResetAsync()
	{
		Item = new();
		if (Item.Id == 0)
		{
			InitExcavatorPropertyType(Item);
		}

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}

		InitEditContext();
	}

	public override async Task SaveItemAsync()
	{
		var customValidationPassed = DoCustomValidation();
		if (!customValidationPassed)
		{
			return;
		}

		try
		{
			await api.SaveExcavatorPropertyTypeAsync(Item);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"Failed to save excavator property type with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}
		
		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}

	public void Dispose()
	{
		if (editContext is not null)
		{
			editContext.OnValidationRequested -= HandleValidationRequested;
		}
	}

	private static void InitExcavatorPropertyType(ExcavatorPropertyType excavatorPropertyType)
	{
		excavatorPropertyType.ExcavatorTypesWithThisProperty ??= new List<ExcavatorType>();
	}

	private bool IsInputTypeSelected() => Item.InputType != InputType.Unset;

	private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
	{
		messageStore.Clear();

		if (!IsInputTypeSelected())
		{
			messageStore.Add(() => Item.InputType, $"Nie je vybraný typ vlastnosti.");
		}
	}

	private void InitEditContext()
	{
		editContext = new EditContext(Item);
		editContext.OnValidationRequested += HandleValidationRequested;
		messageStore = new ValidationMessageStore(editContext);
	}

	/// <summary>
	/// Performs custom validation.
	/// </summary>
	/// <returns><c>true</c> if validation was performed successfully; <c>false</c> otherwise</returns>
	private bool DoCustomValidation()
	{
		if (!IsInputTypeSelected())
		{
			return false;
		}

		return true;
	}
}
