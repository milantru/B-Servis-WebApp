@implements IDisposable
@inherits FormBase<AdditionalEquipment>
@inject ILogger<AdditionalEquipmentForm> logger
@inject IServISApi api
@using ServISWebApp.CssProviders

@if (isAdditionalEquipmentInitialized)
{
	<EditForm EditContext="@editContext" OnValidSubmit="SaveItemAsync" class="form-space-items">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<div class="form-group">
			<InputItemPhotos PhotoType="AdditionalEquipmentPhoto"
							 @bind-Photos="Item.Photos"
							 CreatePhoto="@((dataBytes) => 
								new AdditionalEquipmentPhoto { Photo = dataBytes, AdditionalEquipment = Item })"
							 DeletePhotoAsync="DeleteAdditionalEquipmentPhotoAsync"
							 IsRequired="@(Item.Id == 0)" />
			<ValidationMessage For="@(() => Item.Photos)" />
		</div>

		<br />

		<div class="form-group">
			<label for="excavator-category">Pre akú kategóriu bagrov:</label>
			<ItemsSelector ItemType="ExcavatorCategory"
					   @bind-SelectedItem="Item.ExcavatorCategory"
					   Items="AllExcavatorCategories"
					   Context="excavatorCategory"
					   id="excavator-category">
				<OptionText>@excavatorCategory.Category</OptionText>
			</ItemsSelector>
			<ValidationMessage For="@(() => Item.ExcavatorCategory)" />
		</div>

		<div class="form-group">
			<label for="additional-equipment-category">Kategória:</label>
			<ItemsSelector ItemType="AdditionalEquipmentCategory"
					   @bind-SelectedItem="Item.Category"
					   Items="AllAdditionalEquipmentCategories"
					   Context="additionalEquipmentCategory"
					   id="additional-equipment-category">
				<OptionText>@additionalEquipmentCategory.Category</OptionText>
			</ItemsSelector>
			<ValidationMessage For="@(() => Item.Category)" />
		</div>

		<div class="form-group">
			<label for="additional-equipment-brand">Značka:</label>
			<ItemsSelector ItemType="AdditionalEquipmentBrand"
						   @bind-SelectedItem="Item.Brand"
						   Items="AllAdditionalEquipmentBrands"
						   Context="additionalEquipmentBrand"
						   id="additional-equipment-brand">
				<OptionText>@additionalEquipmentBrand.Brand</OptionText>
			</ItemsSelector>
			<ValidationMessage For="@(() => Item.Brand)" />
		</div>

		<div class="form-group">
			<label for="name">Názov:</label>
			<InputText @bind-Value="@Item.Name" id="name" />
			<ValidationMessage For="@(() => Item.Name)" />
		</div>

		<div class="form-group">
			<label for="description">Popis:</label>
			<InputTextArea @bind-Value="@Item.Description" id="description" />
			<ValidationMessage For="@(() => Item.Description)" />
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
		</div>
	</EditForm>
}

@code {
	private bool isAdditionalEquipmentInitialized;
	private EditContext editContext = null!;
	private ValidationMessageStore messageStore = null!;

	private List<ExcavatorCategory> AllExcavatorCategories { get; set; } = null!;

	private List<AdditionalEquipmentCategory> AllAdditionalEquipmentCategories { get; set; } = null!;

	private List<AdditionalEquipmentBrand> AllAdditionalEquipmentBrands { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllExcavatorCategories = await api.GetExcavatorCategoriesAsync();
		AllAdditionalEquipmentCategories = await api.GetAdditionalEquipmentCategoriesAsync();
		AllAdditionalEquipmentBrands = await api.GetAdditionalEquipmentBrandsAsync();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}

		if (Item.Id == 0)
		{
			InitAdditionalEquipment(Item);
		}
		isAdditionalEquipmentInitialized = true;

		InitEditContext();
	}

	public override async Task ResetAsync()
	{
		Item = new();
		InitAdditionalEquipment(Item);

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}

		InitEditContext();
	}

	public override async Task SaveItemAsync()
	{
		var customValidationPassed = DoCustomValidation();
		if (!customValidationPassed)
		{
			return;
		}

		Item.Photos[0].IsTitle = true;

		try
		{
			await api.SaveAdditionalEquipmentAsync(Item);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"Failed to save additional equipment with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}

		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}

	public void Dispose()
	{
		if (editContext is not null)
		{
			editContext.OnValidationRequested -= HandleValidationRequested;
		}
	}

	private static void InitAdditionalEquipment(AdditionalEquipment additionalEquipment)
	{
		additionalEquipment.Photos ??= new List<AdditionalEquipmentPhoto>();
		additionalEquipment.Brand ??= new();
		additionalEquipment.Category ??= new();
		additionalEquipment.ExcavatorCategory ??= new();
	}

	private async Task DeleteAdditionalEquipmentPhotoAsync(AdditionalEquipmentPhoto additionalEquipmentPhoto)
	{
		if (additionalEquipmentPhoto.Id != 0)
		{
			await api.DeleteAdditionalEquipmentPhotoAsync(additionalEquipmentPhoto);
		}

		Item.Photos.Remove(additionalEquipmentPhoto);

		StateHasChanged();
	}

	private bool ArePhotosEmpty() => Item.Photos.Count == 0;

	private bool IsExcavatorCategorySelected() => Item.ExcavatorCategory.Id != 0;

	private bool IsCategorySelected() => Item.Category.Id != 0;

	private bool IsBrandSelected() => Item.Brand.Id != 0;

	private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
	{
		messageStore.Clear();

		if (ArePhotosEmpty())
		{
			messageStore.Add(() => Item.Photos, $"Neboli nahrané žiadne fotky.");
		}

		if (!IsExcavatorCategorySelected())
		{
			messageStore.Add(() => Item.ExcavatorCategory, $"Nie je vybraná kategória bagrov.");
		}

		if (!IsCategorySelected())
		{
			messageStore.Add(() => Item.Category, $"Nie je vybraná kategória prídavného zariadenia.");
		}

		if (!IsBrandSelected())
		{
			messageStore.Add(() => Item.Brand, $"Nie je vybraná značka prídavného zariadenia.");
		}
	}

	private void InitEditContext()
	{
		editContext = new EditContext(Item);
		editContext.OnValidationRequested += HandleValidationRequested;
		messageStore = new ValidationMessageStore(editContext);
	}

	/// <summary>
	/// Performs custom validation.
	/// </summary>
	/// <returns><c>true</c> if validation was performed successfully; <c>false</c> otherwise</returns>
	private bool DoCustomValidation()
	{
		if (ArePhotosEmpty())
		{
			return false;
		}

		if (!IsExcavatorCategorySelected())
		{
			return false;
		}

		if (!IsCategorySelected())
		{
			return false;
		}

		if (!IsBrandSelected())
		{
			return false;
		}

		return true;
	}
}
