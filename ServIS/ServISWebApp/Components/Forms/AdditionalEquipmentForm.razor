@inherits FormBase<AdditionalEquipment>
@inject IServISApi api
@using ServISWebApp.CssProviders

@if (isAdditionalEquipmentInitialized)
{
	<EditForm Model="@Item" OnValidSubmit="SaveItemAsync" class="form-space-items">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<div class="form-group">
			<InputItemPhotos PhotoType="AdditionalEquipmentPhoto"
							 @bind-Photos="Item.Photos"
							 CreatePhoto="@((dataBytes) => 
								new AdditionalEquipmentPhoto { Photo = dataBytes, AdditionalEquipment = Item })"
							 DeletePhotoAsync="DeleteAdditionalEquipmentPhotoAsync"
							 IsRequired="@(Item.Id == 0)" />
		</div>

		<br />

		<div class="form-group">
			<label for="excavator-category">Pre akú kategóriu strojov:</label>
			<ItemsSelector ItemType="ExcavatorCategory"
					   @bind-SelectedItem="Item.ExcavatorCategory"
					   Items="AllExcavatorCategories"
					   Context="excavatorCategory"
					   id="excavator-category">
				<OptionText>@excavatorCategory.Category</OptionText>
			</ItemsSelector>
		</div>

		<div class="form-group">
			<label for="additional-equipment-category">Kategória:</label>
			<ItemsSelector ItemType="AdditionalEquipmentCategory"
					   @bind-SelectedItem="Item.Category"
					   Items="AllAdditionalEquipmentCategories"
					   Context="additionalEquipmentCategory"
					   id="additional-equipment-category">
				<OptionText>@additionalEquipmentCategory.Category</OptionText>
			</ItemsSelector>
		</div>

		<div class="form-group">
			<label for="additional-equipment-brand">Značka:</label>
			<ItemsSelector ItemType="AdditionalEquipmentBrand"
						   @bind-SelectedItem="Item.Brand"
						   Items="AllAdditionalEquipmentBrands"
						   Context="additionalEquipmentBrand"
						   id="additional-equipment-brand">
				<OptionText>@additionalEquipmentBrand.Brand</OptionText>
			</ItemsSelector>
		</div>

		<div class="form-group">
			<label for="name">Názov:</label>
			<InputText @bind-Value="@Item.Name" id="name" />
			<ValidationMessage For="@(() => Item.Name)" />
		</div>

		<div class="form-group">
			<label for="description">Popis:</label>
			<InputTextArea @bind-Value="@Item.Description" id="description" />
			<ValidationMessage For="@(() => Item.Description)" />
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
		</div>
	</EditForm>
}

@code {
	private bool isAdditionalEquipmentInitialized;

	private List<ExcavatorCategory> AllExcavatorCategories { get; set; } = null!;

	private List<AdditionalEquipmentCategory> AllAdditionalEquipmentCategories { get; set; } = null!;

	private List<AdditionalEquipmentBrand> AllAdditionalEquipmentBrands { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllExcavatorCategories = await api.GetExcavatorCategoriesAsync();
		AllAdditionalEquipmentCategories = await api.GetAdditionalEquipmentCategoriesAsync();
		AllAdditionalEquipmentBrands = await api.GetAdditionalEquipmentBrandsAsync();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}

		if (Item.Id == 0)
		{
			InitAdditionalEquipment(Item);
		}
		isAdditionalEquipmentInitialized = true;
	}

	public override async Task ResetAsync()
	{
		Item = new();
		InitAdditionalEquipment(Item);

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}
	}

	public override async Task SaveItemAsync()
	{
		if (Item.Photos.Count == 0)
		{
			throw new Exception("No additional equipment photos provided.");
		}
		Item.Photos[0].IsTitle = true;

		try
		{
			await api.SaveAdditionalEquipmentAsync(Item);
		}
		catch
		{
			throw new Exception($"Failed to save additional equipment with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}

		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}

	private static void InitAdditionalEquipment(AdditionalEquipment additionalEquipment)
	{
		additionalEquipment.Photos ??= new List<AdditionalEquipmentPhoto>();
		additionalEquipment.Brand ??= new();
		additionalEquipment.Category ??= new();
		additionalEquipment.ExcavatorCategory ??= new();
	}

	private async Task DeleteAdditionalEquipmentPhotoAsync(AdditionalEquipmentPhoto additionalEquipmentPhoto)
	{
		if (Item.Photos.Count > 1)
		{
			if (additionalEquipmentPhoto.Id != 0)
			{
				await api.DeleteAdditionalEquipmentPhotoAsync(additionalEquipmentPhoto);
			}

			Item.Photos.Remove(additionalEquipmentPhoto);

			StateHasChanged();
		}
	}
}
