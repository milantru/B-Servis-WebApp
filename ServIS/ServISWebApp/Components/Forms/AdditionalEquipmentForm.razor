@inject IServISApi api
@using ServISWebApp.CssProviders

@if (isAdditionalEquipmentInitialized)
{
	<EditForm Model="AdditionalEquipment" OnValidSubmit="SaveAdditionalEquipmentAsync">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<InputItemPhotos PhotoType="AdditionalEquipmentPhoto"
						 @bind-Photos="AdditionalEquipment.Photos"
						 CreatePhoto="@((dataBytes) => 
							new AdditionalEquipmentPhoto { Photo = dataBytes, AdditionalEquipment = AdditionalEquipment })"
						 DeletePhotoAsync="@(async (photo) => await DeleteAdditionalEquipmentPhotoAsync(photo))"
						 IsRequired="@(AdditionalEquipment.Id == 0)" />

		<br />
		<br />

		<ItemsSelector ItemType="ExcavatorCategory"
				   @bind-SelectedItem="AdditionalEquipment.ExcavatorCategory"
				   Items="AllExcavatorCategories"
				   Label="Pre akú kategóriu strojov (pásové bagre, šmykom riadené nakladače...):"
				   Context="excavatorCategory">
			<OptionText>@excavatorCategory.Category</OptionText>
		</ItemsSelector>

		<ItemsSelector ItemType="AdditionalEquipmentCategory"
				   @bind-SelectedItem="AdditionalEquipment.Category"
				   Items="AllAdditionalEquipmentCategories"
				   Label="Kategória:"
				   Context="additionalEquipmentCategory">
			<OptionText>@additionalEquipmentCategory.Category</OptionText>
		</ItemsSelector>

		<ItemsSelector ItemType="AdditionalEquipmentBrand"
					   @bind-SelectedItem="AdditionalEquipment.Brand"
					   Items="AllAdditionalEquipmentBrands"
					   Label="Značka:"
					   Context="additionalEquipmentBrand">
			<OptionText>@additionalEquipmentBrand.Brand</OptionText>
		</ItemsSelector>

		<label>Názov:</label>
		<InputText @bind-Value="@AdditionalEquipment.Name" />
		<ValidationMessage For="@(() => AdditionalEquipment.Name)" />

		<label>Popis:</label>
		<InputTextArea @bind-Value="@AdditionalEquipment.Description" />
		<ValidationMessage For="@(() => AdditionalEquipment.Description)" />

		<button class="btn btn-success" type="submit">Uložiť</button>
		<button class="btn btn-secondary" type="reset" @onclick="async () => await ResetAsync()">Reset</button>
	</EditForm>
}

@code {
	private bool isAdditionalEquipmentInitialized;

	[Parameter]
	public AdditionalEquipment AdditionalEquipment { get; set; } = null!;

	[Parameter]
	public EventCallback<AdditionalEquipment> AdditionalEquipmentChanged { get; set; }

	[Parameter]
	public EventCallback AfterValidSubmit { get; set; }

	private List<ExcavatorCategory> AllExcavatorCategories { get; set; } = null!;

	private List<AdditionalEquipmentCategory> AllAdditionalEquipmentCategories { get; set; } = null!;

	private List<AdditionalEquipmentBrand> AllAdditionalEquipmentBrands { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllExcavatorCategories = await api.GetExcavatorCategoriesAsync();
		AllAdditionalEquipmentCategories = await api.GetAdditionalEquipmentCategoriesAsync();
		AllAdditionalEquipmentBrands = await api.GetAdditionalEquipmentBrandsAsync();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (AdditionalEquipment == null)
		{
			throw new Exception($"Parameter '{nameof(AdditionalEquipment)}' not provided.");
		}

		if (AdditionalEquipment.Id == 0)
		{
			InitAdditionalEquipment(AdditionalEquipment);
		}
		isAdditionalEquipmentInitialized = true;
	}

	private static void InitAdditionalEquipment(AdditionalEquipment additionalEquipment)
	{
		additionalEquipment.Photos ??= new List<AdditionalEquipmentPhoto>();
		additionalEquipment.Brand ??= new();
		additionalEquipment.Category ??= new();
		additionalEquipment.ExcavatorCategory ??= new();
	}

	private async Task ResetAsync()
	{
		AdditionalEquipment = new();
		InitAdditionalEquipment(AdditionalEquipment);

		await AdditionalEquipmentChanged.InvokeAsync(AdditionalEquipment);
	}

	private async Task SaveAdditionalEquipmentAsync()
	{
		if (AdditionalEquipment.Photos.Count == 0)
		{
			throw new Exception("No additional equipment photos provided.");
		}
		AdditionalEquipment.Photos[0].IsTitle = true;

		try
		{
			await api.SaveAdditionalEquipmentAsync(AdditionalEquipment);
		}
		catch { /* TODO */ }

		if (AfterValidSubmit.HasDelegate)
		{
			await AfterValidSubmit.InvokeAsync();
		}

		await ResetAsync();
	}

	private async Task DeleteAdditionalEquipmentPhotoAsync(AdditionalEquipmentPhoto additionalEquipmentPhoto)
	{
		if (AdditionalEquipment.Photos.Count > 1)
		{
			if (additionalEquipmentPhoto.Id != 0)
			{
				await api.DeleteAdditionalEquipmentPhotoAsync(additionalEquipmentPhoto);
			}

			AdditionalEquipment.Photos.Remove(additionalEquipmentPhoto);

			StateHasChanged();
		}
	}
}
