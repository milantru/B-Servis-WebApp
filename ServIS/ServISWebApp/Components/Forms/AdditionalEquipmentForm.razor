@inject IServISApi api
@using ServISWebApp.CssProviders

@if (AdditionalEquipment != null && AdditionalEquipment.Photos != null)
{
	<EditForm Model="AdditionalEquipment" OnValidSubmit="HandleValidSubmit">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<InputItemPhotos PhotoType="AdditionalEquipmentPhoto"
						 @bind-Photos="AdditionalEquipment.Photos"
						 CreatePhoto="@((dataBytes) => 
							new AdditionalEquipmentPhoto { Photo = dataBytes, AdditionalEquipment = AdditionalEquipment })"
						 DeletePhotoAsync="@(async (photo) => await DeleteAdditionalEquipmentPhotoAsync(photo))"
						 IsRequired="@(AdditionalEquipment.Id == 0)" />

		<br />
		<br />

		<label>Pre akú kategóriu strojov (pásové bagre, šmykom riadené nakladače...):</label>
		<InputText @bind-Value="@AdditionalEquipment.ExcavatorCategory" />
		<ValidationMessage For="@(() => AdditionalEquipment.ExcavatorCategory)" />

		<label>Kategória:</label>
		<InputText @bind-Value="@AdditionalEquipment.Category" />
		<ValidationMessage For="@(() => AdditionalEquipment.Category)" />

		<label>Značka:</label>
		<InputText @bind-Value="@AdditionalEquipment.Brand" />
		<ValidationMessage For="@(() => AdditionalEquipment.Brand)" />

		<label>Názov:</label>
		<InputText @bind-Value="@AdditionalEquipment.Name" />
		<ValidationMessage For="@(() => AdditionalEquipment.Name)" />

		<label>Popis:</label>
		<InputTextArea @bind-Value="@AdditionalEquipment.Description" />
		<ValidationMessage For="@(() => AdditionalEquipment.Description)" />

		<button class="btn btn-success" type="submit">Uložiť</button>
		<button class="btn btn-secondary" type="reset" @onclick="async () => await ResetAsync()">Reset</button>
	</EditForm>
}

@code {
	[Parameter]
	public AdditionalEquipment AdditionalEquipment { get; set; } = null!;

	[Parameter]
	public EventCallback<AdditionalEquipment> AdditionalEquipmentChanged { get; set; }

	[Parameter]
	public EventCallback AfterValidSubmit { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (AdditionalEquipment == null)
		{
			throw new Exception($"Parameter '{nameof(AdditionalEquipment)}' not provided.");
		}

		if (AdditionalEquipment.Id == 0 && AdditionalEquipment.Photos == null)
		{
			AdditionalEquipment.Photos = new List<AdditionalEquipmentPhoto>();
		}
	}

	private async Task ResetAsync()
	{
		AdditionalEquipment = new AdditionalEquipment { Photos = new List<AdditionalEquipmentPhoto>() };

		await AdditionalEquipmentChanged.InvokeAsync(AdditionalEquipment);
	}

	private async Task HandleValidSubmit()
	{
		if (AdditionalEquipment.Photos.Count == 0)
		{
			throw new Exception("No additional equipment photos provided.");
		}
		AdditionalEquipment.Photos[0].IsTitle = true;

		try
		{
			await api.SaveAdditionalEquipmentAsync(AdditionalEquipment);
		}
		catch { /* TODO */ }

		if (AfterValidSubmit.HasDelegate)
		{
			await AfterValidSubmit.InvokeAsync();
		}

		await ResetAsync();
	}

	private async Task DeleteAdditionalEquipmentPhotoAsync(AdditionalEquipmentPhoto additionalEquipmentPhoto)
	{
		if (AdditionalEquipment.Photos.Count > 1)
		{
			if (additionalEquipmentPhoto.Id != 0)
			{
				await api.DeleteAdditionalEquipmentPhotoAsync(additionalEquipmentPhoto);
			}

			AdditionalEquipment.Photos.Remove(additionalEquipmentPhoto);

			StateHasChanged();
		}
	}
}
