@inherits FormBase<ExcavatorType>
@inject IServISApi api
@using ServISData
@using ServISWebApp.CssProviders

@if (isExcavatorTypeInitialized)
{
	<EditForm Model="@Item" OnValidSubmit="SaveItemAsync" class="form-space-items">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<div class="form-group">
			<label for="excavator-brand">Značka:</label>
			<ItemsSelector ItemType="ExcavatorBrand"
						   @bind-SelectedItem="Item.Brand"
						   Items="@AllExcavatorBrands"
						   Context="excavatorBrand"
						   id="excavator-brand">
				<OptionText>@excavatorBrand.Brand</OptionText>
			</ItemsSelector>
		</div>

		<div class="form-group">
			<label for="excavator-category">Kategória:</label>
			<ItemsSelector ItemType="ExcavatorCategory"
						   @bind-SelectedItem="Item.Category"
						   Items="@AllExcavatorCategories"
						   Context="excavatorCategory"
						   id="excavator-category">
				<OptionText>@excavatorCategory.Category</OptionText>
			</ItemsSelector>
		</div>

		<div class="form-group">
			<label>Typy vlastností:</label>
			@if (AllPropertyTypes != null && AllPropertyTypesChecked != null && AllPropertyTypes.Count == AllPropertyTypesChecked.Count)
			{
				<ChecklistTable ItemType="ExcavatorPropertyType"
								Items="@AllPropertyTypes"
								@bind-ItemsChecked="AllPropertyTypesChecked"
								Context="propertyType">
					<HeaderCols>
						<th>Názov vlastnosti</th>
						<th>Typ vlastnosti</th>
					</HeaderCols>
					<BodyCols>
						<td>@propertyType.Name</td>
						<td>@propertyType.InputType.GetLabel()</td>
					</BodyCols>
				</ChecklistTable>
			}
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="button" @onclick="ResetAsync">Reset</button>
		</div>
	</EditForm>
}

@code {
	private bool isExcavatorTypeInitialized;

	private List<ExcavatorBrand> AllExcavatorBrands { get; set; } = null!;

	private List<ExcavatorCategory> AllExcavatorCategories { get; set; } = null!;

	private List<ExcavatorPropertyType> AllPropertyTypes { get; set; } = null!;
	private List<bool> AllPropertyTypesChecked { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllExcavatorBrands = await api.GetExcavatorBrandsAsync();
		AllExcavatorCategories = await api.GetExcavatorCategoriesAsync();

		AllPropertyTypes = await api.GetExcavatorPropertyTypesAsync();
		AllPropertyTypesChecked = new bool[AllPropertyTypes.Count].ToList();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}

		if (Item.Id == 0)
		{
			InitExcavatorType(Item);
		}
		isExcavatorTypeInitialized = true;

		if (AllPropertyTypes != null)
		{
			var propertyTypes = Item.PropertyTypes;
			var propertyTypesIds = propertyTypes.Select(pt => pt.Id);
			for (int i = 0; i < AllPropertyTypes.Count; i++)
			{
				var excavatorTypeHasProperty = propertyTypesIds.Contains(AllPropertyTypes[i].Id);
				AllPropertyTypesChecked[i] = excavatorTypeHasProperty;
			}
		}
	}

	public override async Task ResetAsync()
	{
		Item = new();
		InitExcavatorType(Item);

		for (int i = 0; i < AllPropertyTypesChecked.Count; i++)
		{
			AllPropertyTypesChecked[i] = false;
		}

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}
	}

	public override async Task SaveItemAsync()
	{
		Item.PropertyTypes = GetCheckedPropertyTypes();

		try
		{
			await api.SaveExcavatorTypeAsync(Item);
		}
		catch
		{
			throw new Exception($"Failed to save excavator type with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}

		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}

	private List<ExcavatorPropertyType> GetCheckedPropertyTypes()
	{
		var checkedPropertyTypes = new List<ExcavatorPropertyType>();

		for (int i = 0; i < AllPropertyTypesChecked.Count; i++)
		{
			if (AllPropertyTypesChecked[i])
			{
				var checkedPropertyType = AllPropertyTypes[i];
				checkedPropertyTypes.Add(checkedPropertyType);
			}
		}

		return checkedPropertyTypes;
	}

	private static void InitExcavatorType(ExcavatorType excavatorType)
	{
		excavatorType.Brand ??= new();
		excavatorType.Category ??= new();
		excavatorType.PropertyTypes ??= new List<ExcavatorPropertyType>();
		excavatorType.ExcavatorsOfThisType ??= new List<Excavator>();
	}
}
