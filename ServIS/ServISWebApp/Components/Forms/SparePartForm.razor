@using ServISWebApp.CssProviders
@inject IServISApi api

<h3>Náhradné diely- vytvorenie nového záznamu</h3>

@if (SparePart != null)
{
	<EditForm Model="SparePart" OnValidSubmit="HandleValidSubmit">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<label>Katalógové číslo:</label>
		<InputNumber @bind-Value=@SparePart.CatalogNumber />
		<ValidationMessage For=@(() => SparePart.CatalogNumber) />

		<label>Názov:</label>
		<InputText @bind-Value=SparePart.Name />
		<ValidationMessage For=@(() => SparePart.Name) />

		@if (AllExcavators != null && AllExcavatorsChecked != null && AllExcavators.Count == AllExcavatorsChecked.Count)
		{
            <ChecklistTable ItemType="Excavator"
							Items="AllExcavators" 
							ItemsChecked="AllExcavatorsChecked" 
							Context="excavator" >
				<HeaderCols>
					<td>Názov:</td>
				</HeaderCols>
				<BodyCols>
					<td>@excavator.Name</td>
				</BodyCols>
			</ChecklistTable>
		}

		<button class="btn btn-success" type="submit">Uložiť</button>
		<button class="btn btn-secondary" type="reset" @onclick="async () => await ResetAsync()">Reset</button>
	</EditForm>
}

@code {
    [Parameter]
    public SparePart SparePart { get; set; } = null!;

    [Parameter]
    public EventCallback<SparePart> SparePartChanged { get; set; }

    [Parameter]
    public EventCallback AfterValidSubmit { get; set; }

    private List<Excavator> AllExcavators { get; set; } = null!;

    private List<bool> AllExcavatorsChecked { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AllExcavators = await api.GetExcavatorsAsync();
        AllExcavatorsChecked = new bool[AllExcavators.Count].ToList();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (SparePart == null)
        {
            /*
            * This if is here because EditorRequired attribute cannot be used
            * if we want to use two way binding (we would use @bind-SparePart=...
            * instead of SparePart=... and it thinks the parameter was not provided)
            */
            throw new ArgumentException($"Parameter '{nameof(SparePart)}' not provided.");
        }

        if (AllExcavators != null)
        {
            var excavatorIds = SparePart.Excavators.Select(e => e.Id);
            for (int i = 0; i < AllExcavators.Count; i++)
            {
                var isSparePartInExcavator = excavatorIds.Contains(AllExcavators[i].Id);
                AllExcavatorsChecked[i] = isSparePartInExcavator;
            }
        }
    }

    private async Task ResetAsync()
    {
        SparePart = new();

        for (int i = 0; i < AllExcavatorsChecked.Count; i++)
        {
            AllExcavatorsChecked[i] = false;
        }

        await SparePartChanged.InvokeAsync(SparePart);
    }

    private List<Excavator> GetCheckedExcavators()
    {
        var checkedExcavators = new List<Excavator>();

        for (int i = 0; i < AllExcavatorsChecked.Count; i++)
        {
            if (AllExcavatorsChecked[i])
            {
                var checkedExcavator = AllExcavators[i];
                checkedExcavators.Add(checkedExcavator);
            }
        }

        return checkedExcavators;
    }

    private async Task HandleValidSubmit()
    {
        SparePart.Excavators = GetCheckedExcavators();

        try
        {
            await api.SaveSparePartAsync(SparePart);
        }
        catch { /* TODO */ }


        await ResetAsync();

        await AfterValidSubmit.InvokeAsync();
    }
}
