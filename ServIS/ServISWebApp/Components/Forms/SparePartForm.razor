@using ServISWebApp.CssProviders
@inherits FormBase<SparePart>
@inject IServISApi api

@if (Item != null)
{
	<EditForm Model="Item" OnValidSubmit="SaveItemAsync" class="form-space-items">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

        <div class="form-group">
		    <label for="catalog-number">Katalógové číslo:</label>
		    <InputNumber @bind-Value="Item.CatalogNumber" id="catalog-number" />
		    <ValidationMessage For=@(() => Item.CatalogNumber) />
        </div>

        <div class="form-group">
		    <label for="name">Názov:</label>
		    <InputText @bind-Value="Item.Name" id="name" />
		    <ValidationMessage For=@(() => Item.Name) />
        </div>

        <div class="form-group">
            <label>Stroje obsahujúce diel:</label>
		    @if (AllExcavators != null && AllExcavatorsChecked != null && AllExcavators.Count == AllExcavatorsChecked.Count)
		    {
                <ChecklistTable ItemType="Excavator"
							    Items="AllExcavators" 
							    @bind-ItemsChecked="AllExcavatorsChecked" 
							    Context="excavator" >
				    <HeaderCols>
					    <th>Názov:</th>
				    </HeaderCols>
				    <BodyCols>
					    <td>@excavator.Name</td>
				    </BodyCols>
			    </ChecklistTable>
		    }
        </div>

        <div>
            <SubmitButton Text="Uložiť" />
		    <button class="btn btn-secondary" type="reset" @onclick="async () => await ResetAsync()">Reset</button>
        </div>
	</EditForm>
}

@code {
    private List<Excavator> AllExcavators { get; set; } = null!;
    private List<bool> AllExcavatorsChecked { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        AllExcavators = await api.GetExcavatorsAsync();
        AllExcavatorsChecked = new bool[AllExcavators.Count].ToList();
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        if (Item == null)
        {
            /*
            * This if is here because EditorRequired attribute cannot be used
            * if we want to use two way binding (we would use @bind-SparePart=...
            * instead of SparePart=... and it thinks the parameter was not provided)
            */
            throw new ArgumentException($"Parameter '{nameof(Item)}' not provided.");
        }

        if (Item.Id == 0 )
        {
            InitSparePart(Item);
        }

        if (AllExcavators != null)
        {
            var excavatorIds = Item.Excavators.Select(e => e.Id);
            for (int i = 0; i < AllExcavators.Count; i++)
            {
                var isSparePartInExcavator = excavatorIds.Contains(AllExcavators[i].Id);
                AllExcavatorsChecked[i] = isSparePartInExcavator;
            }
        }
    }

    public override async Task ResetAsync()
    {
        Item = new();
        InitSparePart(Item);

        for (int i = 0; i < AllExcavatorsChecked.Count; i++)
        {
            AllExcavatorsChecked[i] = false;
        }

        await ItemChanged.InvokeAsync(Item);
    }

    private List<Excavator> GetCheckedExcavators()
    {
        var checkedExcavators = new List<Excavator>();

        for (int i = 0; i < AllExcavatorsChecked.Count; i++)
        {
            if (AllExcavatorsChecked[i])
            {
                var checkedExcavator = AllExcavators[i];
                checkedExcavators.Add(checkedExcavator);
            }
        }

        return checkedExcavators;
    }

    public override async Task SaveItemAsync()
    {
        Item.Excavators = GetCheckedExcavators();

        try
        {
            await api.SaveSparePartAsync(Item);
        }
        catch
        {
            throw new Exception($"Failed to save spare part with id '{Item.Id}'.");
        }

        if (OnSave.HasDelegate)
        {
            await OnSave.InvokeAsync();
        }
        
        if (AfterSaveAsync != null)
        {
            await AfterSaveAsync();
        }

        await ResetAsync();
    }

    private static void InitSparePart(SparePart sparePart)
	{
        sparePart.Excavators ??= new List<Excavator>();
	}
}
