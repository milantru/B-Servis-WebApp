@using ServISWebApp.CssProviders
@inject IServISApi api

<h3>Náhradné diely- vytvorenie nového záznamu</h3>

@if (SparePart != null)
{
	<EditForm Model="SparePart" OnValidSubmit="HandleValidSubmit">
		<DataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<label>Katalógové číslo:</label>
		<InputNumber @bind-Value=@SparePart.CatalogNumber />
		<ValidationMessage For=@(() => SparePart.CatalogNumber) />

		<label>Názov:</label>
		<InputText @bind-Value=SparePart.Name />
		<ValidationMessage For=@(() => SparePart.Name) />

		@if (Excavators != null)
		{
			<table class="table">
				<thead>
					<tr>
						<td>Názov:</td>
						<td>Obsahuje diel:</td>
					</tr>
				</thead>
				<tbody>

					@for (int i = 0; i < Excavators.Count; i++)
					{
						// otherwise would i be a reference;
						// for more see: https://stackoverflow.com/questions/64982700/how-to-use-the-array-of-checkbox-in-asp-net-core-razor
						int iCopy = i;
						<tr>
							<td>
								@Excavators[iCopy].Name
							</td>
							<td>
								<input type="checkbox"
									   checked=@ExcavatorsChecked[iCopy]
									   @onclick=@(() => ExcavatorsChecked[iCopy] = !ExcavatorsChecked[iCopy]) />
							</td>
						</tr>
					}
				</tbody>
			</table>
		}

		<button class="btn btn-success" type="submit">Uložiť</button>
		<button class="btn btn-secondary" type="reset" @onclick="@(async () => await InvokeAsync(Reset))">Reset</button>
	</EditForm>
}

@code {
	[Parameter]
	public SparePart SparePart { get; set; } = null!;

	[Parameter]
	public EventCallback<SparePart> SparePartChanged { get; set; }

	[Parameter]
	public EventCallback AfterValidSubmit { get; set; }

	private List<Excavator> Excavators { get; set; } = null!;

	private List<bool> ExcavatorsChecked { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Excavators = await api.GetExcavatorsAsync();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (SparePart == null)
		{
			/*
			* This if is here because EditorRequired attribute cannot be used
			* if we want to use two way binding (we would use @bind-SparePart=...
			* instead of SparePart=... and it thinks the parameter was not provided)
			*/
			throw new ArgumentException("SparePartForm used without a SparePart");
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (Excavators != null)
		{
			ExcavatorsChecked = new List<bool>(Excavators.Count);
			foreach (var excavator in Excavators)
			{
				//var excavatorHasSparePart = excavator.SpareParts.Contains(SparePart);
				//ExcavatorsChecked.Add(excavatorHasSparePart);
				ExcavatorsChecked.Add(false);
			}
		}
	}

	private async void Reset()
	{
		SparePart = new SparePart();

		await SparePartChanged.InvokeAsync(SparePart);
	}

	private async Task HandleValidSubmit()
	{
		var excavatorsUsingSparePart = new List<Excavator>();
		for (int i = 0; i < ExcavatorsChecked.Count; i++)
		{
			if (ExcavatorsChecked[i])
			{
				excavatorsUsingSparePart.Add(Excavators[i]);
			}
		}
		SparePart.Excavators = excavatorsUsingSparePart;

		try
		{
			await api.SaveSparePartAsync(SparePart);
		}
		catch { /* TODO */ }

		Reset();
		await AfterValidSubmit.InvokeAsync();
	}
}
