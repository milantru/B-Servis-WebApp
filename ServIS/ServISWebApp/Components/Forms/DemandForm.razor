@inject NavigationManager navMan
@inject IConfiguration config
@inject IServISApi api
@using ServISWebApp.Auth
@using ServISWebApp.CssProviders
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations;

@if (DemandInfo != null)
{
	<div id="demand-form" class="w-75 servis-border" style="display: @(isFormHidden ? "none" : "block");">
		<EditForm Model="DemandInfo" OnValidSubmit="SendFormDataAsync" class="form-space-items">
			<ObjectGraphDataAnnotationsValidator />
			<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

			@* There is Context="ctx" just because I was getting an error (it seems EditForm 
			   and and AuthorizeView both use 'context' as Context so I had to rename it) *@
			<AuthorizeView Context="ctx">
				<NotAuthorized>
					<div class="row">
						<div class="form-group w-100">
							<p id="disclaimer">
								Ak u nás máte vytvorený účet, prosím prihláste sa <a href="/prihlasovanie">tu</a> a vyhnite sa tak vypĺňaniu údajov o Vás (Meno, Priezvisko...).
								Ak u nás účet ešte nemáte, zvážte registráciu, ktorú nájdete <a href="/registracia">tu</a>.
							</p>
						</div>
					</div>
					<div class="row">
						<div class="d-flex flex-no-wrap">
							<div class="form-group">
								<label>Meno:</label>
								<InputText @bind-Value="DemandInfo.User.Name" />
								<ValidationMessage For="@(() => DemandInfo.User.Name)" />
							</div>

							<div class="form-group">
								<label>Priezvisko:</label>
								<InputText @bind-Value="DemandInfo.User.Surname" />
								<ValidationMessage For="@(() => DemandInfo.User.Surname)" />
							</div>
						</div>
					</div>

					<div class="row">
						<div class="d-flex flex-no-wrap">
							<div class="form-group">
								<label>Telefónne číslo:</label>
								<InputText @bind-Value="DemandInfo.User.PhoneNumber" />
								<ValidationMessage For="@(() => DemandInfo.User.PhoneNumber)" />
							</div>

							<div class="form-group">
								<label>Email:</label>
								<InputText @bind-Value="DemandInfo.User.Email" />
								<ValidationMessage For="@(() => DemandInfo.User.Email)" />
							</div>
						</div>
					</div>

					<div class="row">
						<div class="d-flex">
							<div class="form-group">
								<label>Mesto:</label>
								<InputText @bind-Value="DemandInfo.User.Residence" />
								<ValidationMessage For="@(() => DemandInfo.User.Residence)" />
							</div>
						</div>
					</div>
				</NotAuthorized>
			</AuthorizeView>

			<div class="row">
				<div class="d-flex">
					<div class="form-group w-100">
						<label>Správa:</label>
						<InputTextArea @bind-Value="DemandInfo.Message" placeholder="Dobrý deň. Mal by som záujem/Chcel by som sa opýtať..." rows="7" />
						<ValidationMessage For="@(() => DemandInfo.Message)" />
					</div>
				</div>
			</div>

			<div id="btn-panel" class="container-center-items-horizontal">
				<SubmitButton Text="Odoslať" />
			</div>
		</EditForm>
	</div>
}

@code {
	private bool isFormHidden = true;
	private EmailManager emailManager = null!;
	private AuthenticationState authState = null!;

	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationStateAsync { get; set; } = null!;

	[EditorRequired, Parameter]
	public string DemandedItemName { get; set; } = null!;

	private DemandForm.Demand DemandInfo { get; set; } = null!;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		emailManager = new EmailManager(config["EmailName"], config["EmailAddress"], config["EmailAppPassword"]);
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		authState = await AuthenticationStateAsync;

		await ResetDemandInfoAsync();
	}

	public void ToggleForm()
	{
		isFormHidden = !isFormHidden;

		StateHasChanged();
	}

	private async Task ResetDemandInfoAsync()
	{
		DemandInfo = new() { Message = string.Empty };
		var anonymousUser = new User() { Username = "Anonym", Password = "Anonym123" };

		var isUserAuthenticated = authState?.User.Identity?.IsAuthenticated ?? false;
		if (isUserAuthenticated)
		{
			int userId = 0;
			try
			{
				// its ok to use ! here because authState is not null (otherwise isUserAuthenticated wouldn't be true)
				userId = int.Parse(authState!.User.Claims.First(c => c.Type == ClaimTypes.PrimarySid).Value);
				DemandInfo.User = await api.GetUserAsync(userId);
			}
			catch
			{
				Console.WriteLine($"Failed getting user with id '{userId}'.");
				DemandInfo.User = anonymousUser;
			}
		}
		else
		{
			DemandInfo.User = anonymousUser;
		}
	}

	private async Task SendFormDataAsync()
	{
		var additionalInfo = $"<injected_url>{navMan.Uri}</injected_url>";

		var email = new Email
			{
				FromName = $"{DemandInfo.User.Name} {DemandInfo.User.Surname}",
				FromAddress = DemandInfo.User.Email,
				ToName = emailManager.EmailName,
				ToAddress = emailManager.EmailAddress,
				DateTime = DateTime.Now,
				Subject = $"Dopyt: {DemandedItemName}",
				Text = additionalInfo + DemandInfo.Message
			};

		await ResetDemandInfoAsync();

		await emailManager.SendEmailAsync(email);
	}

	private class Demand
	{
		/* We have to set some dummy values to `Username` and `Password` properties
		 * or else form's validation would stop us from submitting.
		 * (I want `ValidateComplexType` to be here, so other properties are validated.) */
		[ValidateComplexType]
		public User User { get; set; } = new() { Username = "Anonym", Password = "Anonym123" };

		[Required(AllowEmptyStrings = false, ErrorMessage = "Správa nesmie byť prázdna.")]
		public string Message { get; set; } = string.Empty;
	}
}
