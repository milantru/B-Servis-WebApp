@inject IServISApi api
@inject IJSRuntime js
@using ServISData
@using ServISWebApp.CssProviders;
@using System.Collections
@using System.Text

@if (isExcavatorInitialized)
{
	<EditForm Model="Excavator" OnValidSubmit="HandleValidSubmit">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<InputItemPhotos PhotoType="ExcavatorPhoto"
						 @bind-Photos="Excavator.Photos"
						 CreatePhoto="@((dataBytes) => 
							new ExcavatorPhoto { Photo = dataBytes, Excavator = Excavator })"
						 DeletePhotoAsync="@(async (photo) => await DeletePhotoAsync(photo))"
						 IsRequired="@(Excavator.Id == 0)" />

		<br />

		<label>Názov:</label>
		<InputText @bind-Value="@Excavator.Name" />
		<ValidationMessage For="@(() => Excavator.Name)" />

		<label>Popis:</label>
		<InputTextArea @bind-Value="@Excavator.Description" />
		<ValidationMessage For="@(() => Excavator.Description)" />

		<label>Je IBA pre aukciu:</label>
		<input type="checkbox"
			   checked="@Excavator.IsForAuctionOnly"
			   @bind-value="@Excavator.IsForAuctionOnly" />
		@*<InputCheckbox @bind-Value="@TrackedExcavator.IsForAuctionOnly" class="form-check-input"/>*@
		<ValidationMessage For="@(() => Excavator.IsForAuctionOnly)" />

		<br />

		<label>Náhradné diely v stroji:</label>
		@if (AllSpareParts != null && AllSparePartsChecked != null && AllSpareParts.Count == AllSparePartsChecked.Count)
		{
			<ChecklistTable ItemType="SparePart"
							Items="AllSpareParts"
							@bind-ItemsChecked="AllSparePartsChecked"
							Context="sp">
				<HeaderCols>
					<th>Katalógové číslo</th>
					<th>Názov</th>
				</HeaderCols>
				<BodyCols>
					<td>@sp.CatalogNumber</td>
					<td>@sp.Name</td>
				</BodyCols>
			</ChecklistTable>
		}

		<br />

		<ExcavatorTypeSelector @bind-ExcavatorType="Excavator.Type" OnSelect="UpdateExcavatorProperties" />

		<br />

		<h6>Špecifické vlastnosti:</h6>
		@if (Excavator.Properties.Count == 0)
		{
			<p>Tento typ stroja nemá žiadne vlastnosti</p>
		}
		else
		{
			<table>
				<thead>
					<tr>
						<th>Názov vlastnosti</th>
						<th>Hodnota</th>
					</tr>
				</thead>
				<tbody>
					@foreach (var property in Excavator.Properties)
					{
						var propertyType = property.PropertyType;
						var propertyInputType = propertyType.InputType;
						<tr>
							<td><label>@propertyType.Name</label></td>

							@switch (propertyInputType)
							{
								case InputType.Date:
									@*<td><InputDate TValue="string" @bind-Value="property.Value" /></td>*@
									<td><input type="datetime" @bind-value="property.Value" /></td>
									break;
								case InputType.Number:
									@*<td><InputNumber TValue="string" @bind-Value="property.Value" /></td>*@
									<td><input type="number" @bind-value="property.Value" /></td>
									break;
								case InputType.Text:
									<td><InputText @bind-Value="property.Value" /></td>
									break;
								case InputType.TextArea:
									<td><InputTextArea @bind-Value="property.Value" /></td>
									break;
								case InputType.Unset:
									throw new Exception("Excavator property input type is unset.");
								default:
									throw new Exception("Unknown excavator property input type.");
							}
						</tr>
					}
				</tbody>
			</table>
		}

		<button class="btn btn-success" type="submit">Uložiť</button>
		<button class="btn btn-secondary" type="reset" @onclick="async () => await ResetAsync()">Reset</button>
	</EditForm>
}

@code {
	private bool isExcavatorInitialized;

	[Parameter]
	public Excavator Excavator { get; set; } = null!;

	[Parameter]
	public EventCallback<Excavator> ExcavatorChanged { get; set; }

	[Parameter]
	public EventCallback AfterValidSubmit { get; set; }

	// bool is in pair with spare part, it will tell us if spare part is checked
	private List<SparePart> AllSpareParts { get; set; } = null!;
	private List<bool> AllSparePartsChecked { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllSpareParts = await api.GetSparePartsAsync();
		AllSparePartsChecked = new bool[AllSpareParts.Count].ToList();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Excavator == null)
		{
			throw new Exception($"Parameter '{nameof(Excavator)}' not provided.");
		}

		if (Excavator.Id == 0)
		{
			InitExcavator(Excavator);
		}
		isExcavatorInitialized = true;

		if (AllSpareParts != null)
		{
			if (Excavator.SpareParts == null)
			{// Excavator.SpareParts will not be null here, but compiler doesn't see it, so we need this if
				throw new Exception($"{nameof(Excavator.SpareParts)} cannot be null here.");
			}

			var excavatorsSparePartsIds = Excavator.SpareParts.Select(sp => sp.Id);
			for (int i = 0; i < AllSpareParts.Count; i++)
			{
				bool excavatorHasSparePart = excavatorsSparePartsIds.Contains(AllSpareParts[i].Id);
				AllSparePartsChecked[i] = excavatorHasSparePart;
			}
		}
	}

	private static void InitExcavator(Excavator excavator)
	{
		excavator.Photos ??= new List<ExcavatorPhoto>();
		excavator.Type ??= new ExcavatorType();
		excavator.Properties ??= new List<ExcavatorProperty>();
		excavator.SpareParts ??= new List<SparePart>();
	}

	private async Task ResetAsync()
	{
		Excavator = new();
		InitExcavator(Excavator);

		for (int i = 0; i < AllSparePartsChecked.Count; i++)
		{
			AllSparePartsChecked[i] = false;
		}

		await ExcavatorChanged.InvokeAsync(Excavator);
	}

	private List<SparePart> GetCheckedSpareParts()
	{
		var checkedSpareParts = new List<SparePart>();

		for (var i = 0; i < AllSparePartsChecked.Count; i++)
		{
			if (AllSparePartsChecked[i])
			{
				checkedSpareParts.Add(AllSpareParts[i]);
			}
		}

		return checkedSpareParts;
	}

	private async Task HandleValidSubmit()
	{
		if (Excavator.Photos.Count == 0)
		{
			throw new Exception("No excavator photos provided.");
		}
		Excavator.Photos[0].IsTitle = true; // the first uploaded image is the title photo

		Excavator.SpareParts = GetCheckedSpareParts();

		try
		{
			await api.SaveExcavatorAsync(Excavator);
		}
		catch { /* TODO */ }

		if (AfterValidSubmit.HasDelegate)
		{
			await AfterValidSubmit.InvokeAsync();
		}

		await ResetAsync();
	}

	private async Task DeletePhotoAsync(ExcavatorPhoto excavatorPhoto)
	{
		if (Excavator.Photos.Count > 1)
		{
			if (excavatorPhoto.Id != 0)
			{
				await api.DeleteExcavatorPhotoAsync(excavatorPhoto);
			}

			Excavator.Photos.Remove(excavatorPhoto);

			StateHasChanged();
		}
	}

	private void UpdateExcavatorProperties()
	{
		Excavator.Properties.Clear();
		foreach (var propertyType in Excavator.Type.PropertyTypes)
		{
			Excavator.Properties.Add(new ExcavatorProperty
				{
					PropertyType = propertyType,
				});
		}

		StateHasChanged();
	}
}
