@inject IServISApi api
@inject IJSRuntime js
@inject NavigationManager navMan
@typeparam ExcavatorCategory where ExcavatorCategory : Excavator, new()
@using ServISWebApp.CssProviders;
@using System.Collections

@if (Excavator != null)
{
	<EditForm Model="Excavator" OnValidSubmit="HandleValidSubmit">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

		<InputFile OnChange="HandleInputFileChange" multiple required="@(@Excavator.Id == 0 ? true : false)" />
		<div>
			Nahrané fotky (max. veľkosť fotky je 50kB):<br />

			@if (DisplayedExcavatorPhotos.Count == 0)
			{
				<p>Nie sú nahrané žiadne fotky.</p>
			}
			else
			{
				<div class="d-flex flex-wrap">
					@foreach (var photo in DisplayedExcavatorPhotos)
					{
						<div class="pos-rel">
							<img src="@FileTools.GetDataUrlBase64String(photo.Photo, "image/jpeg")" />
							<button class="btn btn-danger delete-btn" type="button" onclick="@(() => DeletePhotoAsync(photo))">X</button>
						</div>
					}
				</div>
			}
		</div>

		<br />
		<br />

		<label>Značka:</label>
		<InputText @bind-Value="@Excavator.Brand" disabled />
		<ValidationMessage For="@(() => Excavator.Brand)" />

		<label>Kategória:</label>
		<InputText @bind-Value="@Excavator.Category" disabled />
		<ValidationMessage For="@(() => Excavator.Category)" />

		<label>Model:</label>
		<InputText @bind-Value="@Excavator.Model" />
		<ValidationMessage For="@(() => Excavator.Model)" />

		<label>Názov:</label>
		<InputText @bind-Value="@Excavator.Name" />
		<ValidationMessage For="@(() => Excavator.Name)" />

		<label>Popis:</label>
		<InputTextArea @bind-Value="@Excavator.Description" />
		<ValidationMessage For="@(() => Excavator.Description)" />

		<label>Je nový:</label>
		<input type="checkbox"
		   checked="@Excavator.IsNew"
		   @bind-value="@Excavator.IsNew" />
		@*<InputCheckbox @bind-Value="@TrackedExcavator.IsNew" class="form-check-input"/>*@
		<ValidationMessage For="@(() => Excavator.IsNew)" />

		@if (!@Excavator.IsNew)
		{
			<br />
			<label>Dátum poslednej prehliadky:</label>
			<InputDate @bind-Value="@Excavator.LastInspection" />
			<ValidationMessage For="@(() => Excavator.LastInspection)" />
		}

		<br />
		<br />

		<label>Náhradné diely:</label>
		<table class="table">
			<thead>
				<tr>
					<th>Katalógové číslo</th>
					<th>Názov</th>
					<th>Pridať</th>
				</tr>
			</thead>
			<tbody>
				@if (AllSpareParts != null && AllSparePartsChecked != null && AllSpareParts.Count == AllSparePartsChecked.Count)
				{
					@for (int i = 0; i < AllSpareParts.Count; i++)
					{
						// otherwise would i be a reference;
						// for more see: https://stackoverflow.com/questions/64982700/how-to-use-the-array-of-checkbox-in-asp-net-core-razor
						var iCopy = i;
						<tr>
							<td>@AllSpareParts[iCopy].CatalogNumber</td>
							<td>@AllSpareParts[iCopy].Name</td>
							@*<td><InputCheckbox @bind-Value="@SparePartsChecked[i]" /></td>*@
							<td>
								<input type="checkbox"
									   checked="@AllSparePartsChecked[iCopy]"
									   @bind-value="@AllSparePartsChecked[iCopy]" />
							</td>
						</tr>
					}
				}
			</tbody>
		</table>

		<br />
		<br />

		@if (ExcavatorSpecificInfoFields != null)
		{
			<table class="table">
				@ExcavatorSpecificInfoFields
			</table>
		}

		<button class="btn btn-success" type="submit">Uložiť</button>
	</EditForm>
}

@code {
	[EditorRequired, Parameter]
	public string LinkToGoAfterValidSubmit { get; set; } = null!;

	[Parameter]
	public RenderFragment ExcavatorSpecificInfoFields { get; set; } = null!;

	[EditorRequired, Parameter]
	public ExcavatorCategory Excavator { get; set; } = null!;

	// bool is in pair with spare part, it will tell us if spare part is checked
	public List<SparePart> AllSpareParts { get; set; } = null!;
	public List<bool> AllSparePartsChecked { get; set; } = null!;

	private List<ExcavatorPhoto> DisplayedExcavatorPhotos { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllSpareParts = await api.GetSparePartsAsync();
		if (AllSpareParts == null)
		{
			throw new Exception("Spare parts missing.");
		}
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		/* AllSparePartsChecked == null needs to be here because after changing ExcavatorSpecificInfoFields 
			* this method was called again and rewrote user data 
			* also  Excavator != null is needed because for some reason Excavator was sometimes null even though
			* it shouldnt be at this point */
		if (AllSpareParts != null && AllSparePartsChecked == null && Excavator != null)
		{
			AllSparePartsChecked = new List<bool>(AllSpareParts.Count);
			var excavatorsSparePartsIds = Excavator.SpareParts.Select(sp => sp.Id);
			for (int i = 0; i < AllSpareParts.Count; i++)
			{
				bool excavatorHasSparePart = excavatorsSparePartsIds.Contains(AllSpareParts[i].Id);
				AllSparePartsChecked.Add(excavatorHasSparePart);
			}
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		/* DisplayedExcavatorPhotos.Count == 0 needs to be here because after changing ExcavatorSpecificInfoFields 
			* this method was called again and rewrote user data 
			* also Excavator != null is here because of the same reason as in OnParametersSet() */
		if (Excavator != null && Excavator.Id != 0 && DisplayedExcavatorPhotos.Count == 0)
		{
			DisplayedExcavatorPhotos = await api.GetExcavatorPhotosAsync(Excavator.Id, false);
			if (DisplayedExcavatorPhotos == null || DisplayedExcavatorPhotos.Count == 0)
			{
				throw new Exception("Excavator photo(s) missing");
			}

			foreach (var photo in DisplayedExcavatorPhotos)
			{
				photo.Excavator = Excavator;
			}
		}
	}

	private async Task HandleInputFileChange(InputFileChangeEventArgs e)
	{
		var uploadedFiles = e.GetMultipleFiles();

		foreach (var uploadedFile in uploadedFiles)
		{
			if (!uploadedFile.IsValidImageFile(out string? errorMessage))
			{
				await js.InvokeVoidAsync("alert", errorMessage);
				continue;
			}

			var dataBytes = await uploadedFile.GetDataBytesAsync();
			if (dataBytes == null)
			{
				throw new Exception("Something went wrong with uploading photo.");
			}

			var excavatorPhoto = new ExcavatorPhoto
			{
				Photo = dataBytes,
				Excavator = Excavator
			};
			DisplayedExcavatorPhotos.Add(excavatorPhoto);
		}

		StateHasChanged();
	}

	private List<SparePart> GetSelectedSpareParts()
	{
		var selectedSpareParts = new List<SparePart>();

		for (var i = 0; i < AllSparePartsChecked.Count; i++)
		{
			if (AllSparePartsChecked[i])
			{
				selectedSpareParts.Add(AllSpareParts[i]);
			}
		}

		return selectedSpareParts;
	}

	private void FinishSettingExcavator()
	{
		if (Excavator.IsNew)
		{
			Excavator.LastInspection = null;
		}

		Excavator.SpareParts = GetSelectedSpareParts();
	}

	private void FinishSettingExcavatorPhotos()
	{
		if (DisplayedExcavatorPhotos.Count == 0)
		{
			throw new Exception("No excavator photos provided.");
		}
		DisplayedExcavatorPhotos[0].IsTitle = true; // the first uploaded image is the title photo
	}

	private async Task HandleValidSubmit()
	{
		FinishSettingExcavator();

		FinishSettingExcavatorPhotos();

		foreach (var photo in DisplayedExcavatorPhotos)
		{
			try
			{
				await api.SaveExcavatorPhotoAsync(photo); // this will also save excavator because photo contains it
			}
			catch { /* TODO */ }
		}

		navMan.NavigateTo(LinkToGoAfterValidSubmit);
	}

	private async Task DeletePhotoAsync(ExcavatorPhoto excavatorPhoto)
	{
		if (DisplayedExcavatorPhotos.Count > 1)
		{
			if (excavatorPhoto.Id != 0)
			{
				await api.DeleteExcavatorPhotoAsync(excavatorPhoto);
			}

			DisplayedExcavatorPhotos.Remove(excavatorPhoto);

			StateHasChanged();
		}
	}
}
