@implements IDisposable
@inherits FormBase<Excavator>
@inject IJSRuntime js
@inject ILogger<ExcavatorForm> logger
@inject IServISApi api
@using ServISData
@using ServISWebApp.CssProviders;
@using System.Collections
@using System.Text

@if (isExcavatorInitialized)
{
	<EditForm EditContext="@editContext" OnValidSubmit="SaveItemAsync" class="form-space-items">
		<ObjectGraphDataAnnotationsValidator />
		<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />
		
		<div class="form-group">
			<InputItemPhotos PhotoType="ExcavatorPhoto"
							 @bind-Photos="Item.Photos"
							 CreatePhoto="@((dataBytes) => 
								new ExcavatorPhoto { Photo = dataBytes, Excavator = Item })"
							 DeletePhotoAsync="DeletePhotoAsync"
							 IsRequired="@(Item.Id == 0)" />
			<ValidationMessage For="@(() => Item.Photos)" />
		</div>

		<div class="form-group">
			<label for="name">Názov:</label>
			<InputText @bind-Value="Item.Name" id="name" />
			<ValidationMessage For="@(() => Item.Name)" />
		</div>

		<div class="form-group">
			<label for="description">Popis:</label>
			<InputTextArea @bind-Value="Item.Description" id="description" />
			<ValidationMessage For="@(() => Item.Description)" />
		</div>

		<div class="form-check">
			<label for="auction-only" class="form-check-label">Je IBA pre aukciu</label>
			<input type="checkbox"
				   checked="@Item.IsForAuctionOnly"
				   @bind-value="Item.IsForAuctionOnly"
				   class="form-check-input"
				   id="auction-only" />
			@*<InputCheckbox @bind-Value="@TrackedExcavator.IsForAuctionOnly" class="form-check-input"/>*@
			<ValidationMessage For="@(() => Item.IsForAuctionOnly)" />
		</div>

		<br />

		<div class="form-group">
			<label>Náhradné diely v stroji:</label>
			@if (AllSpareParts != null && AllSparePartsChecked != null && AllSpareParts.Count == AllSparePartsChecked.Count)
			{
				<ChecklistTable ItemType="SparePart"
								Items="@AllSpareParts"
								@bind-ItemsChecked="AllSparePartsChecked"
								Context="sp">
					<HeaderCols>
						<th>Katalógové číslo</th>
						<th>Názov</th>
					</HeaderCols>
					<BodyCols>
						<td>@sp.CatalogNumber</td>
						<td>@sp.Name</td>
					</BodyCols>
				</ChecklistTable>
			}
		</div>

		<br />

		<div class="form-group">
			<label for="excavator-type">Typy strojov:</label>
			<ItemsSelector ItemType="ExcavatorType"
						   @bind-SelectedItem="Item.Type"
						   Items="@AllExcavatorTypes"
						   OnSelect="UpdateExcavatorProperties"
						   Context="excavatorType"
						   id="excavator-type">
				<OptionText>@excavatorType.Category.Category (@excavatorType.Brand.Brand)</OptionText>
			</ItemsSelector>
			<ValidationMessage For="@(() => Item.Type)" />
		</div>

		<br />

		<div class="form-group">
			<label>Špecifické vlastnosti:</label>
			@if (Item.Properties.Count == 0)
			{
				<p>Tento typ stroja nemá žiadne vlastnosti</p>
			}
			else
			{
				<table>
					<thead>
						<tr>
							<th>Názov vlastnosti</th>
							<th>Hodnota</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var property in Item.Properties)
						{
							var propertyType = property.PropertyType;
							var propertyInputType = propertyType.InputType;
							<tr>
								<td><label>@propertyType.Name</label></td>

								@switch (propertyInputType)
								{
									case InputType.Date:
										@*<td><InputDate TValue="string" @bind-Value="property.Value" /></td>*@
										<td><input type="datetime" @bind-value="property.Value" /></td>
										break;
									case InputType.Number:
										@*<td><InputNumber TValue="string" @bind-Value="property.Value" /></td>*@
										<td><input type="number" @bind-value="property.Value" /></td>
										break;
									case InputType.Text:
										<td><InputText @bind-Value="property.Value" /></td>
										break;
									case InputType.TextArea:
										<td><InputTextArea @bind-Value="property.Value" /></td>
										break;
									case InputType.Unset:
										var errMsg1 = "Excavator property input type is unset.";
										var ex1 = new Exception(errMsg1);
										logger.LogError(ex1, errMsg1);
										throw ex1;
									default:
										var errMsg2 = "Unknown excavator property input type.";
										var ex2 = new Exception(errMsg2);
										logger.LogError(ex2, errMsg2);
										throw ex2;
								}
							</tr>
						}
					</tbody>
				</table>
			}
		</div>

		<div>
			<SubmitButton Text="Uložiť" />
			<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
		</div>
	</EditForm>
}

@code {
	private bool isExcavatorInitialized;
	private EditContext editContext = null!;
	private ValidationMessageStore messageStore = null!;

	private List<ExcavatorType> AllExcavatorTypes { get; set; } = null!;
	// bool is in pair with spare part, it will tell us if spare part is checked
	private List<SparePart> AllSpareParts { get; set; } = null!;
	private List<bool> AllSparePartsChecked { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		AllExcavatorTypes = await api.GetExcavatorTypesAsync();

		AllSpareParts = await api.GetSparePartsAsync();
		AllSparePartsChecked = new bool[AllSpareParts.Count].ToList();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}

		if (Item.Id == 0)
		{
			InitExcavator(Item);
		}
		isExcavatorInitialized = true;

		if (AllSpareParts != null)
		{
			var excavatorsSparePartsIds = Item.SpareParts.Select(sp => sp.Id);
			for (int i = 0; i < AllSpareParts.Count; i++)
			{
				bool excavatorHasSparePart = excavatorsSparePartsIds.Contains(AllSpareParts[i].Id);
				AllSparePartsChecked[i] = excavatorHasSparePart;
			}
		}

		InitEditContext();
	}

	public override async Task ResetAsync()
	{
		Item = new();
		InitExcavator(Item);

		for (int i = 0; i < AllSparePartsChecked.Count; i++)
		{
			AllSparePartsChecked[i] = false;
		}

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}

		InitEditContext();
	}

	public override async Task SaveItemAsync()
	{
		var customValidationPassed = DoCustomValidation();
		if (!customValidationPassed)
		{
			return;
		}

		Item.Photos[0].IsTitle = true; // the first uploaded image is the title photo

		Item.SpareParts = GetCheckedSpareParts();

		try
		{
			await api.SaveExcavatorAsync(Item);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"Failed to save excavator with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}

		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}

	public void Dispose()
	{
		if (editContext is not null)
		{
			editContext.OnValidationRequested -= HandleValidationRequested;
		}
	}

	private static void InitExcavatorProperties(Excavator excavator)
	{
		excavator.Properties = new List<ExcavatorProperty>();

		if (excavator.Type.Id != 0)
		{
			foreach (var propertyType in excavator.Type.PropertyTypes)
			{
				excavator.Properties.Add(new ExcavatorProperty()
				{
					PropertyType = propertyType,
					Value = ""
				});
			}
		}
	}

	private static void InitExcavator(Excavator excavator)
	{
		excavator.Photos ??= new List<ExcavatorPhoto>();
		excavator.Type ??= new ExcavatorType();
		InitExcavatorProperties(excavator);
		excavator.SpareParts ??= new List<SparePart>();
	}

	private List<SparePart> GetCheckedSpareParts()
	{
		var checkedSpareParts = new List<SparePart>();

		for (var i = 0; i < AllSparePartsChecked.Count; i++)
		{
			if (AllSparePartsChecked[i])
			{
				checkedSpareParts.Add(AllSpareParts[i]);
			}
		}

		return checkedSpareParts;
	}

	private async Task DeletePhotoAsync(ExcavatorPhoto excavatorPhoto)
	{
		if (excavatorPhoto.Id != 0)
		{
			await api.DeleteExcavatorPhotoAsync(excavatorPhoto);
		}

		Item.Photos.Remove(excavatorPhoto);

		StateHasChanged();
	}

	private void UpdateExcavatorProperties()
	{
		Item.Properties.Clear();

		foreach (var propertyType in Item.Type.PropertyTypes)
		{
			Item.Properties.Add(new ExcavatorProperty
			{
				PropertyType = propertyType,
				Value = ""
			});
		}
	}

	private bool ArePhotosEmpty() => Item.Photos.Count == 0;

	private bool IsExcavatorTypeSelected() => Item.Type.Id != 0;

	private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
	{
		messageStore.Clear();

		if (ArePhotosEmpty())
		{
			messageStore.Add(() => Item.Photos, $"Neboli nahrané žiadne fotky.");
		}

		if (!IsExcavatorTypeSelected())
		{
			messageStore.Add(() => Item.Type, $"Nie je vybraný žiaden typ stroja.");
		}
	}

	private void InitEditContext()
	{
		editContext = new EditContext(Item);
		editContext.OnValidationRequested += HandleValidationRequested;
		messageStore = new ValidationMessageStore(editContext);
	}

	/// <summary>
	/// Performs custom validation.
	/// </summary>
	/// <returns>true if validation was performed successfully; false otherwise</returns>
	private bool DoCustomValidation()
	{
		if (ArePhotosEmpty())
		{
			return false;
		}

		if (!IsExcavatorTypeSelected())
		{
			return false;
		}

		return true;
	}
}
