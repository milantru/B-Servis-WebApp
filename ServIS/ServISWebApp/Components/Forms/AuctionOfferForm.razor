@implements IDisposable
@inherits FormBase<AuctionOffer>
@inject IJSRuntime js
@inject ILogger<AuctionOfferForm> logger
@inject IServISApi api
@using ServISWebApp.CssProviders
@using ServISData.Interfaces
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Inputs

@if (Item != null)
{
	<div id="auction-offer-form" class="w-75 servis-border">
		<EditForm EditContext="@editContext" OnValidSubmit="SaveItemAsync">
			<ObjectGraphDataAnnotationsValidator />
			<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

			<div class="row">
				<div class="d-flex flex-no-wrap">
					<div class="form-group w-50-100">
						<label for="starting-bid">Počiatočná cena:</label>
						<SfNumericTextBox TValue="decimal"
									  @bind-Value="Item.StartingBid"
									  ID="starting-bid" />
						<ValidationMessage For="@(() => Item.StartingBid)" />
					</div>

					<div class="form-group w-50-100">
						<label for="offer-end">Koniec aukcie:</label>
						<SfDateTimePicker TValue="DateTime"
									  @bind-Value="Item.OfferEnd"
									  ID="offer-end" />
						<ValidationMessage For="@(() => Item.OfferEnd)" />
					</div>
				</div>
			</div>

			<div class="row">
				<div class="d-flex">
					<div class="form-group w-100">
						<label for="description">Popis:</label>
						<InputTextArea @bind-Value="Item.Description" id="description" rows="7" />
						<ValidationMessage For="@(() => Item.Description)" />
					</div>
				</div>
			</div>

			<div class="row">
				<div class="d-flex">
					<div class="form-group w-100">
						<label for="excavator">Bagre:</label>
						<ItemsSelector ItemType="Excavator"
									   @bind-SelectedItem="Item.Excavator"
									   Items="@Excavators"
									   Context="excavator"
									   id="excavator">
							<OptionText>@excavator.Name</OptionText>
						</ItemsSelector>
						<ValidationMessage For="@(() => Item.Excavator)" />
					</div>
				</div>
			</div>

			<div class="row">
				<div class="form-group w-100">
					<div id="btn-panel">
						<SubmitButton Text="@(Item.IsEvaluated ? "Uložiť a spustiť odznova" : "Uložiť")" />
						<button class="btn btn-secondary" type="reset" @onclick="ResetAsync">Reset</button>
					</div>
				</div>
			</div>
		</EditForm>
	</div>
}

@code {
	private EditContext editContext = null!;
	private ValidationMessageStore messageStore = null!;
	private List<Excavator> Excavators { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		Excavators = await api.GetExcavatorsAsync();
	}

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (Item == null)
		{
			throw new Exception($"Parameter '{nameof(Item)}' not provided.");
		}

		if (Item.Id == 0)
		{
			InitAuctionOffer(Item);
		}

		InitEditContext();
	}

	public override async Task ResetAsync()
	{
		Item = new AuctionOffer();
		InitAuctionOffer(Item);

		if (ItemChanged.HasDelegate)
		{
			await ItemChanged.InvokeAsync(Item);
		}

		InitEditContext();
	}

	public override async Task SaveItemAsync()
	{
		var customValidationPassed = DoCustomValidation();
		if (!customValidationPassed)
		{
			return;
		}

		if (Item.IsEvaluated)
		{// it's a restart of the auction offer
			var auctionBids = await api.GetAuctionBidsAsync(Item.Id);
			foreach (var auctionBid in auctionBids)
			{
				await api.DeleteAuctionBidAsync(auctionBid);

				var user = auctionBid.User;
				if (user.IsTemporary) {
					await api.DeleteUserAsync(user);
				}
			}
			Item.IsEvaluated = false;
		}

		try
		{
			await api.SaveAuctionOfferAsync(Item);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"Failed to save auction offer with id '{Item.Id}'.");
		}

		if (OnSave.HasDelegate)
		{
			await OnSave.InvokeAsync();
		}

		if (AfterSaveAsync != null)
		{
			await AfterSaveAsync();
		}

		await ResetAsync();
	}

	public void Dispose()
	{
		if (editContext is not null)
		{
			editContext.OnValidationRequested -= HandleValidationRequested;
		}
	}

	private static void InitAuctionOffer(AuctionOffer auctionOffer)
	{
		auctionOffer.OfferEnd = DateTime.Now;
		auctionOffer.Excavator ??= new();
	}

	private bool IsStartingBidLessThanZero() => Item.StartingBid < 0;

	private bool IsOfferEndSetToPast() => Item.OfferEnd < DateTime.Now;

	private bool IsExcavatorSelected() => Item.Excavator.Id != 0;

	private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args)
	{
		messageStore.Clear();

		if (IsStartingBidLessThanZero())
		{
			messageStore.Add(() => Item.StartingBid, $"Počiatočná cena nemôže byť záporná.");
		}

		if (IsOfferEndSetToPast())
		{
			messageStore.Add(() => Item.OfferEnd, $"Koniec aukcie nemôže byť v minulosti.");
		}

		if (!IsExcavatorSelected())
		{
			messageStore.Add(() => Item.Excavator, $"Nie je vybraný žiaden bager.");
		}
	}

	private void InitEditContext()
	{
		editContext = new EditContext(Item);
		editContext.OnValidationRequested += HandleValidationRequested;
		messageStore = new ValidationMessageStore(editContext);
	}

	/// <summary>
	/// Performs custom validation.
	/// </summary>
	/// <returns><c>true</c> if validation was performed successfully; <c>false</c> otherwise</returns>
	private bool DoCustomValidation()
	{
		if (IsStartingBidLessThanZero())
		{
			return false;
		}

		if (IsOfferEndSetToPast())
		{
			return false;
		}

		if (!IsExcavatorSelected())
		{
			return false;
		}

		return true;
	}
}
