@inject IServISApi api
@using ServISWebApp.CssProviders

<EditForm Model="AdditionalEquipmentBrand" OnValidSubmit="SaveAdditionalEquipmentBrandAsync" class="form-space-items">
	<DataAnnotationsValidator />
	<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

	<div class="form-group">
		<label for="additional-equipment-brand">Názov značky:</label>
		<InputText @bind-Value="AdditionalEquipmentBrand.Brand" id="additional-equipment-brand" />
		<ValidationMessage For="@(() => AdditionalEquipmentBrand.Brand)" />
	</div>

	<div>
		<SubmitButton Text="Uložiť" />
		<button class="btn btn-secondary" type="reset" @onclick="async () => await ResetAsync()">Reset</button>
	</div>
</EditForm>

@code {
	[Parameter]
	public AdditionalEquipmentBrand AdditionalEquipmentBrand { get; set; } = null!;

	[Parameter]
	public EventCallback<AdditionalEquipmentBrand> AdditionalEquipmentBrandChanged { get; set; }

	[Parameter]
	public EventCallback AfterValidSubmit { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		if (AdditionalEquipmentBrand == null)
		{
			throw new Exception($"Parameter '{nameof(AdditionalEquipmentBrand)}' not provided.");
		}
	}

	private async Task ResetAsync()
	{
		AdditionalEquipmentBrand = new();

		await AdditionalEquipmentBrandChanged.InvokeAsync(AdditionalEquipmentBrand);
	}

	private async Task SaveAdditionalEquipmentBrandAsync()
	{
		try
		{
			await api.SaveAdditionalEquipmentBrandAsync(AdditionalEquipmentBrand);
		}
		catch
		{
			throw new Exception($"Failed to save additional equipment brand with id '{AdditionalEquipmentBrand.Id}'.");
		}

		if (AfterValidSubmit.HasDelegate)
		{
			await AfterValidSubmit.InvokeAsync();
		}

		await ResetAsync();
	}
}
