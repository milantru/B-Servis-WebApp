@using System.Timers;
@using ServISWebApp.BackgroundServices;

@if (AuctionOffer is not null)
{
	<div class="pos-rel servis-outline card-container">
		<a href="aukcna-ponuka/@AuctionOffer.Id">
			<img src="@imgSrc">
			<div class="panel">
				<div class="heading">@AuctionOffer.Excavator.Name</div>
				<div class="countdown servis-outline">
					<CountdownDisplayer EndTime="@AuctionOffer.OfferEnd" EndMessage="Koniec aukcie" />
				</div>
			</div>
		</a>
		@if (OnDelete.HasDelegate)
		{
			<AuthorizeView Roles="Administrator">
				<button class="btn btn-danger delete-btn"
						type="button"
						@onclick="OnDelete">X</button>
			</AuthorizeView>
		}
	</div>
}

@code {
	private string imgSrc = null!;

	[EditorRequired, Parameter]
	public AuctionOffer AuctionOffer { get; set; } = null!;

	[Parameter]
	public EventCallback OnDelete { get; set; }

	protected override void OnParametersSet()
	{
		base.OnParametersSet();

		var excavatorTitlePhoto = AuctionOffer.Excavator.Photos.First(p => p.IsTitle);
		imgSrc = FileTools.GetDataUrlBase64String(excavatorTitlePhoto.Photo, "images/jpeg");
	}
}
