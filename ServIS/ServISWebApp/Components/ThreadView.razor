@using MailKit;
@inject Modals modals

@if (Thread?.Messages is null)
{
	<p>Načítava sa...</p>
}
else
{
	<div>
		<div class="top-panel">
			<BackIconButton OnClick="OnBack" />
			<DeleteIconButton IsDisabled="@(IsReplyInProgress || IsLoadingThreads)" OnClick="DeleteThreadAsync" />
			<MarkAsReadUnreadIconButton IsDisabled="@(IsReplyInProgress || IsLoadingThreads)" OnClick="MarkAsUnreadAsync" />

			<span class="subject">@Thread.Messages.Last().Subject</span>
		</div>
		<div>
			@if (requestedItemUrl is not null) 
			{
				<div class="first-msg-container">
					<div class="msg-part">
						<Message Email="@Thread.Messages.First()" EmailManager="@EmailManager" />
					</div>
					<div class="required-item-window-part">
						<a href="@requestedItemUrl" target="_blank"><iframe src="@requestedItemUrl"></iframe></a>
					</div>
				</div>
			}
			else
			{
				<Message Email="@Thread.Messages.First()" EmailManager="@EmailManager" />
			}

			@if (Thread.Messages.Count > 1)
			{
				@foreach (var email in Thread.Messages.Skip(1))
				{
					<Message Email="@email" EmailManager="@EmailManager" />
				}

				@if (IsReplyInProgress)
				{
					<div>(Posiela sa...)</div>
				}
			}
		</div>
		<div class="reply-container">
			<textarea @bind="ReplyText" @bind:event="oninput"></textarea>
			<button disabled="@IsReplyButtonDisabled" @onclick="SendReplyAsync">Odoslať</button>
		</div>
	</div>
}

@code {
	private string? requestedItemUrl;

	[Parameter]
	public Thread Thread { get; set; } = null!;

	[Parameter]
	public EventCallback<Thread> ThreadChanged { get; set; }

	[Parameter]
	public bool IsLoadingThreads { get; set; }

	// this parameter is here so we dont have to make new email manager each time we open some thread
	[Parameter]
	public EmailManager EmailManager { get; set; } = null!;

	[Parameter]
	public EventCallback OnBack { get; set; }

	[Parameter]
	public EventCallback<Thread> OnSent { get; set; }

	[Parameter]
	public EventCallback<Thread> OnDelete { get; set; }

	private string ReplyText { get; set; } = string.Empty;

	private bool IsReplyInProgress => !Thread.Messages.Last().Uid.IsValid;

	private bool IsReplyButtonDisabled => ReplyText.Length == 0 || IsReplyInProgress;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (!Thread.IsRead)
		{
			await MarkThreadAsReadAsync();
		}

		ExtractRequestedItemUrl();
	}

	private async Task SendReplyAsync()
	{
		if (IsReplyButtonDisabled)
		{
			return;
		}

		/* The reason why I assign Thread to variable here is that there was problem when user clicked on sent
		 * and quickly after that pressed back button. By pressing back button CurrentlyChosenThread in Messages 
		 * was set to null and in that moment OnSent was invoked here which tried to check the last message 
		 * of CurrentlyChosenThread but as I already mentioned it was null, hence Exception was thrown.
		 * This variable assignment allows us to remember thread from which the mesage was sent, so after
		 * reloading threads with new messages (including this newly sent one) we can find it and check
		 * the last mesage (the newly sent one) whether it was marked as seen properly. */
		var thread = Thread;

		/* There was a problem that admin could double click on send button and reply 
		 * was sent twice. Checking for reply length and using tmp variable is enough
		 * to solve the problem. */
		var replyTextTmp = ReplyText;
		ReplyText = string.Empty;

		var firstEmail = Thread.Messages.First();
		var lastEmail = Thread.Messages.Last();

		// we use dummyReplyEmail for display to the user so he sees that something has happened immediately
		// (and doesn't have to wait until sending the reply is awaited)
		var dummyReplyEmail = new Email
			{
				Uid = UniqueId.Invalid,
				FromName = EmailManager.EmailName,
				FromAddress = EmailManager.EmailAddress,
				ToName = firstEmail.ReplyToName,
				ToAddress = firstEmail.ReplyToAddress,
				Subject = lastEmail.Subject, 
				Text = replyTextTmp,
				DateTime = DateTime.Now,
				IsRead = true
			};
		Thread.Messages.Add(dummyReplyEmail);

		// It is true that EmailManager.ReplyToAsync returnes reply email but 
		// Uid of it is invalid (if we want to make another reply, i.e. reply to this reply,
		// we need to reload messages of this thread, or at least msg summaries of this last message,
		// to obtain valid Uid. Reloading can be done e.g. in OnSent event handler.)
		await EmailManager.ReplyToAsync(lastEmail, replyTextTmp, firstEmail.ReplyToName, firstEmail.ReplyToAddress);

		await OnSent.InvokeAsync(thread);
	}

	private void ExtractRequestedItemUrl()
	{
		if (Thread.Messages.Count == 0)
		{
			requestedItemUrl = null;
			return;
		}

		var firstEmail = Thread.Messages.First();
		if (firstEmail.FromAddress != EmailManager.EmailAddress)
		{// email was not sent from this app (so potentially could be dangerous to parse headers)
			requestedItemUrl = null;
			return;
		}

		if (firstEmail.Headers is null || firstEmail.Headers.Count == 0)
		{// there is no url because there are no headers
			requestedItemUrl = null;
			return;
		}

		requestedItemUrl = firstEmail.Headers.FirstOrDefault(h => h.Field == "X-ServIS-url")?.Value;
	}

	private async Task DeleteThreadAsync()
	{
		var isDeletionConfirmed = await modals.DisplayConfirmationAsync(
			confirmationMessage: "Naozaj chcete vymazať túto konverzáciu natrvalo?",
			title: "Vymazať konverzáciu"
		);
		if (!isDeletionConfirmed)
		{
			return;
		}

		var uids = Thread.Messages.Select(e => e.Uid).ToList();

		var deleteEmailsTask = EmailManager.DeleteEmailAsync(uids);

		await OnBack.InvokeAsync();

		await OnDelete.InvokeAsync(Thread);

		await deleteEmailsTask;
	}

	private async Task MarkThreadAsReadAsync()
	{
		var markEmailsAsReadTask = EmailManager.MarkEmailAsReadAsync(Thread.Messages);

		Thread.IsRead = true;
		await ThreadChanged.InvokeAsync(Thread);

		await markEmailsAsReadTask;
	}

	private async Task MarkAsUnreadAsync()
	{
		var lastEmail = Thread.Messages.Last();

		var markEmailAsUnreadTask = EmailManager.MarkEmailAsUnreadAsync(lastEmail);

		Thread.IsRead = false;
		await ThreadChanged.InvokeAsync(Thread);

		await OnBack.InvokeAsync();

		await markEmailAsUnreadTask;
	}
}
