using ServISData.Models;

namespace ServISWebApp.Shared
{
    /// <summary>
    /// Represents a summary of an auction, including the auction offer, bidding information 
	/// and the winning bid (if applicable).
    /// </summary>
	/// <para>
	/// <remarks>
	/// This class is intended to be used as a data source for formatting the autogenerated messages regarding the auction.
	/// </remarks>
	/// </para>
    public class AuctionSummary
	{
        /// <summary>
        /// Gets the auction offer associated with this auction summary.
        /// </summary>
        public AuctionOffer AuctionOffer { get; }

        /// <summary>
        /// Gets the bid placed in the auction (if applicable).
        /// </summary>
        public AuctionBid? Bid { get; }

        /// <summary>
        /// Gets the winning bid of the auction (if applicable).
        /// </summary>
        public AuctionBid? WinningBid { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuctionSummary"/> class.
        /// </summary>
		/// <para>
		/// <remarks>
		/// This overload of the constructor is intended to be used when notifying the admin 
		/// that the auction has ended without participants.
		/// </remarks>
		/// </para>
        /// <param name="auctionOffer">The <see cref="ServISData.Models.AuctionOffer"/> 
		/// associated with the auction.</param>
        public AuctionSummary(AuctionOffer auctionOffer)
        {
			AuctionOffer = auctionOffer;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuctionSummary"/> class.
		/// <para>
		/// <remarks>
		/// This overload of the constructor is intended to be used when notifying auction winner 
		/// he/she has won the auction. Or when notifying admin about the end of the auction (the winner exists).
		/// </remarks>
		/// </para>
        /// </summary>
        /// <param name="auctionOffer">The <see cref="ServISData.Models.AuctionOffer"/> associated with the auction.</param>
        /// <param name="winningBid">The winner's <see cref="AuctionBid"/> of the auction.</param>
        public AuctionSummary(AuctionOffer auctionOffer, AuctionBid winningBid)
		{
			AuctionOffer = auctionOffer;
			WinningBid = winningBid;
			/* We assign winning bid to bid, because defensive programming... 
			 * This way the behavior makes more sense, e.g. when admin uses tag to dispaly the price the participant has provided,
			 * it would show the same amount as if he asked for the winners provided price. Because in this case the participant 
			 * is also the winner. */
			Bid = winningBid;
		}

        /// <summary>
        /// Initializes a new instance of the <see cref="AuctionSummary"/> class.
		/// <para>
		/// <remarks>
		/// This overload of the constructor is intended to be used when notifying a user who has lost the auction.
		/// </remarks>
		/// </para>
        /// </summary>
        /// <param name="auctionOffer">The <see cref="ServISData.Models.AuctionOffer"/> associated with the auction.</param>
        /// <param name="bid">The <see cref="AuctionBid"/> placed by the user (who is being notified).</param>
        /// <param name="winningBid">The winner's <see cref="AuctionBid"/> of the auction.</param>
        public AuctionSummary(AuctionOffer auctionOffer, AuctionBid bid, AuctionBid winningBid)
		{
			AuctionOffer = auctionOffer;
			Bid = bid;
			WinningBid = winningBid;

            /* The following code is used for censoring the winners info. The admin may use tags that allow access to the winners info 
			 * in the message (e.g.) for the users that have lost the auction. It seems inappropriate to give the ability to expose the winners pernosal info to the admin. That is why this censorship exists. */
            WinningBid.User = new()
			{
				Username = "-",
				Password = "-",
				Name = "-",
				Surname = "-",
				Email = "-",
				PhoneNumber = "-",
				Residence = "-"
			};
		}
	}
}
