@page "/"

@inject IServISApi api
@inject SfDialogService dialogService
@inject IConfiguration config

<PageTitle>@(config.GetValue<string>("CompanyName")) | Domov</PageTitle>

<AuthorizeView Roles="Administrator">
	<a href="/admin/nova-ponuka">Pridať novú ponuku</a>
</AuthorizeView>

@if (MainOffers == null)
{
	<p>Načítava sa...</p>
}
else if (MainOffers.Count == 0)
{
	<p>Neexistujú žiadne hlavné ponuky.</p>
}
else
{
	<div class="content wrap-on">
		@foreach (var mainOffer in MainOffers)
		{
			<MainCard MainOffer="@mainOffer"
					  OnDelete="async () => await DeleteMainOfferAsync(mainOffer)" />
		}
	</div>
}

@code {
	public List<MainOffer> MainOffers { get; private set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		try
		{
			MainOffers = await api.GetMainOffersAsync();
		}
		catch
		{
			throw new Exception("Error retrieving main offers.");
		}
	}

	private async Task DeleteMainOfferAsync(MainOffer mainOffer)
	{
		var dialogButtonOptions = new DialogButtonOptions { Content = "Zrušiť" };
		var dialogOptions = new DialogOptions
			{
				ShowCloseIcon = true,
				CancelButtonOptions = dialogButtonOptions
			};
		var isDeletionConfirmed = await dialogService.ConfirmAsync(
			content: "Naozaj chcete túto ponuku vymazať natrvalo?",
			title: "Vymazať ponuku natrvalo",
			options: dialogOptions
		);
		if (!isDeletionConfirmed)
		{
			return;
		}

		await api.DeleteMainOfferAsync(mainOffer);
		MainOffers.Remove(mainOffer);
	}
}
