@page "/admin/novy-stroj/{ExcavatorTypeId:int}"
@page "/admin/uprava-stroja/{ExcavatorId:int}"

@attribute [Authorize(Roles = "Administrator")]
@inject IServISApi api
@inject NavigationManager navMan

<h3>Stroje- @(ExcavatorTypeId.HasValue ? "vytvorenie nového" : "úprava existujúceho") záznamu</h3>

@if (Excavator == null)
{
	<p>Načítava sa...</p>
}
else
{
	<ExcavatorForm @bind-Excavator="Excavator" AfterValidSubmit="@(() => navMan.NavigateTo($"/typ-stroja/{Excavator.Type.Id}"))" />
}

@code {
	[Parameter]
	public int? ExcavatorTypeId { get; set; } = null!;

	[Parameter]
	public int? ExcavatorId { get; set; } = null!;

	public Excavator Excavator { get; private set; } = null!;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		if (ExcavatorTypeId.HasValue)
		{// new excavator
			ExcavatorType excavatorTypeTmp;
			try
			{
				excavatorTypeTmp = await api.GetExcavatorTypeAsync(ExcavatorTypeId.Value);
			}
			catch
			{
				throw new Exception($"Excavator type with id {ExcavatorTypeId.Value} not found.");
			}

			Excavator = new() { Type = excavatorTypeTmp };
		}
		else if (ExcavatorId.HasValue)
		{// edit of existing excavator
			try
			{
				Excavator = await api.GetExcavatorAsync(ExcavatorId.Value);
			}
			catch
			{
				throw new Exception($"Excavator with id {ExcavatorId.Value} not found.");
			}
		}
	}
}
