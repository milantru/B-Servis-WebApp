@page "/aukcna-ponuka/{AuctionOfferId:int}"

@inject ILogger<AuctionOfferDetail> logger
@inject IServISApi api
@inject AuthenticationStateProvider authStateProvider
@inject Modals modals
@inject NavigationManager navMan
@using ServISWebApp.Auth;

@if (auctionOfferExists && AuctionOffer != null)
{
	<div class="container">
		<div class="row img-and-desc-container">
			<div class="col img-container">
				<div class="img">
					<PhotoSlider Images="GetImages()" />
				</div>
			</div>

			<div class="col desc">
				<h4>@AuctionOffer.Excavator.Name</h4>

				<p>Počiatočná cena: @AuctionOffer.StartingBid €</p>
				<p>Končí: @AuctionOffer.OfferEnd.ToString("g")</p>
				<p>Počet uchádzačov: @biddersCount</p>
				<p><b>Aktuálna cena:</b> @currentMaxBid €</p>
				<p>Ostáva už len: <CountdownDisplayer EndTime="@AuctionOffer.OfferEnd" OnEnded="CloseForm" /></p>

				<p>@AuctionOffer.Description</p>

				@if (!isAdmin)
				{
					<button @onclick="ToggleForm" disabled="@(!IsOfferActive)">Mám záujem!</button>
				}
			</div>
		</div>

		<br />

		<div class="row">
			<div class="col">
				<p>@AuctionOffer.Excavator.Description</p>
			</div>
		</div>

		@if (!isAdmin)
		{
			<div class="row">
				<div class="col">
					@if (IsOfferActive)
					{
						<AuctionBidForm @ref="auctionBidForm" 
										AuctionOffer="AuctionOffer"
										OnSent="GetAdditionalAuctionInfoAsync" />
					}
				</div>
			</div>
		}

		<div class="row">
			<div class="col">
				<p>Vlastnosti stroja:</p>
				<table class="table">
					<tbody>
						@foreach (var property in AuctionOffer.Excavator.Properties)
						{
							<tr>
								<td>@property.PropertyType.Name</td>
								<td>@property.Value</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<AuthorizeView Roles="Administrator">
			<button class="btn btn-secondary" @onclick="GoToAuctionOfferEditPage">Uprav</button>
			<button class="btn btn-danger" @onclick="DeleteAuctionOfferAsync">Zmazať</button>
		</AuthorizeView>
	</div>
}
else if (!auctionOfferExists)
{
	<p>Táto aukčná ponuka neexistuje.</p>
}

@code {
	private bool isAdmin;
	private bool auctionOfferExists = true;
	private int biddersCount;
	private decimal currentMaxBid;
	private AuctionBidForm auctionBidForm = null!;

	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationStateAsync { get; set; } = null!;

	[Parameter]
	public int AuctionOfferId { get; set; }

	private AuctionOffer AuctionOffer { get; set; } = null!;
	private bool IsOfferActive => AuctionOffer.OfferEnd >= DateTime.Now;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		await SetAuctionOfferAsync();
		if (!auctionOfferExists)
		{
			return;	
		}

		await GetAdditionalAuctionInfoAsync();

		await CheckIfLoggedInAsAdminAsync();
	}

	public void ToggleForm()
	{
		if (IsOfferActive)
		{
			auctionBidForm.ToggleForm();
		}
	}

	private List<byte[]> GetImages() => AuctionOffer.Excavator.Photos.Select(p => p.Photo).ToList();

	private void GoToAuctionOfferEditPage()
	{
		navMan.NavigateTo($"/admin/uprava-aukcnej-ponuky/{AuctionOffer.Id}");
	}

	private async Task SetCurrentMaxBidAsync()
	{
		var maxAuctionBid = await api.GetMaxAuctionBidAsync(AuctionOfferId);
		currentMaxBid = maxAuctionBid?.Bid ?? AuctionOffer.StartingBid;
	}

	private async Task SetBiddersCountAsync()
	{
		biddersCount = await api.GetAuctionBiddersCountAsync(AuctionOffer.Id);
	}

	private async Task DeleteAuctionOfferAsync()
	{
		var isDeletionConfirmed = await modals.DisplayConfirmationAsync(
			confirmationMessage: "Naozaj chcete vymazať túto aukčnú ponuku?",
			title: "Vymazať"
		);
		if (!isDeletionConfirmed)
		{
			return;
		}

		await api.DeleteAuctionOfferAsync(AuctionOffer);

		navMan.NavigateTo("/aukcia");
	}

	private void CloseForm()
	{
		if (auctionBidForm is null)
		{
			return;
		}

		if (auctionBidForm.IsVisible)
		{
			auctionBidForm.ToggleForm();
		}
	}

	private async Task GetAdditionalAuctionInfoAsync()
	{
		await SetBiddersCountAsync();
		await SetCurrentMaxBidAsync();
	}

	private async Task SetAuctionOfferAsync()
	{
		try
		{
			AuctionOffer = await api.GetAuctionOfferAsync(AuctionOfferId);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"AuctionOffer with id '{AuctionOfferId}' was not found.");
			auctionOfferExists = false;
		}
	}

	private async Task CheckIfLoggedInAsAdminAsync()
	{
		var authState = await AuthenticationStateAsync;

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

		isAdmin = await customAuthStateProvider.CheckIfLoggedInAsAdminAsync(authState);
	}
}
