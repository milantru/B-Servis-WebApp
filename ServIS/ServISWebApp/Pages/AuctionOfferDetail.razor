@page "/aukcna-ponuka/{AuctionOfferId:int}"

@implements IDisposable
@inject IServISApi api
@inject NavigationManager navMan
@using ServISWebApp.BackgroundServices;

@if (auctionOfferExists && AuctionOffer != null)
{
	<div class="container">
		<div class="row img-and-desc-container">
			<div class="col img-container">
				<div class="img">
					<PhotoSlider Images="GetImages()" />
				</div>
			</div>

			<div class="col desc">
				<h4>@AuctionOffer.Excavator.Name</h4>

				<p>Počiatočná cena: @AuctionOffer.StartingBid €</p>
				<p>Končí: @AuctionOffer.OfferEnd.ToString("g")</p>
				<p><b>Aktuálna cena:</b> @currentMaxBid €</p>
				<p>Ostáva už len: @GetCountdown()</p>

				<p>@AuctionOffer.Description</p>

				<button @onclick="ToggleForm" disabled="@(!IsOfferActive)">Mám záujem!</button>
			</div>
		</div>

		<br />

		<div class="row">
			<div class="col">
				<p>@AuctionOffer.Excavator.Description</p>
			</div>
		</div>

		<div class="row">
			<div class="col">
				<AuctionBidForm @ref="auctionBidForm" 
								DemandedItemName="@(AuctionOffer.Excavator.Name + "(aukcia)")"
								AuctionOffer="AuctionOffer" />
			</div>
		</div>

		<div class="row">
			<div class="col">
				<p>Vlastnosti stroja:</p>
				<table class="table">
					<tbody>
						@foreach (var property in AuctionOffer.Excavator.Properties)
						{
							<tr>
								<td>@property.PropertyType.Name</td>
								<td>@property.Value</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<AuthorizeView Roles="Administrator">
			<button class="btn btn-secondary" @onclick="GoToAuctionOfferEditPage">Uprav</button>
		</AuthorizeView>
	</div>
}
else if (!auctionOfferExists)
{
	<p>Táto aukčná ponuka neexistuje.</p>	
}

@code {
	private bool auctionOfferExists = true;
	private decimal currentMaxBid;
	private AuctionBidForm auctionBidForm = null!;

	[Parameter]
	public int AuctionOfferId { get; set; }

	private AuctionOffer AuctionOffer { get; set; } = null!;
	private bool IsOfferActive => AuctionOffer.OfferEnd >= DateTime.Now;

	protected override void OnInitialized()
	{
		base.OnInitialized();

		TimerService.UpdateEverySecondEvent += NotifyStateHasChanged;
	}

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		try
		{
			AuctionOffer = await api.GetAuctionOfferAsync(AuctionOfferId);
		}
		catch
		{
			Console.WriteLine($"AuctionOffer with id '{AuctionOfferId}' was not found.");
			auctionOfferExists = false;
		}

		await SetCurrentMaxBid();
	}

	public void ToggleForm()
	{
		if (IsOfferActive)
		{
			auctionBidForm.ToggleForm();
		}
	}

	public void Dispose()
	{
		TimerService.UpdateEverySecondEvent -= NotifyStateHasChanged;
	}

	private async Task NotifyStateHasChanged() => await InvokeAsync(() => StateHasChanged());

	private List<byte[]> GetImages() => AuctionOffer.Excavator.Photos.Select(p => p.Photo).ToList();

	private void GoToAuctionOfferEditPage()
	{
		navMan.NavigateTo($"/admin/uprava-aukcnej-ponuky/{AuctionOffer.Id}");
	}

	private async Task SetCurrentMaxBid()
	{
		var maxAuctionBid = await api.GetMaxAuctionBidAsync(AuctionOfferId);
		currentMaxBid = maxAuctionBid?.Bid ?? AuctionOffer.StartingBid;
	}

	private string GetCountdown()
	{
		var timeRemaining = AuctionOffer.OfferEnd - DateTime.Now;
		if (timeRemaining <= TimeSpan.Zero)
		{
			return "0d 0h 0m 0s"; ;
		}

		return $"{timeRemaining:%d}d {timeRemaining:%h}h {timeRemaining:%m}m {timeRemaining:%s}s";
	}
}
