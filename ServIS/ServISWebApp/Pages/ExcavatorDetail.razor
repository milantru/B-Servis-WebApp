@page "/stroj/{ExcavatorId:int}"

@inject IServISApi api
@inject NavigationManager navMan

@if (Excavator != null)
{
	<div class="container">
		<div class="row">
			<div class="col">
				<PhotoSlider Images="GetImages()" />
			</div>

			<div class="col">
				<h4>@Excavator.Name</h4>

				<p>@Excavator.Description</p>

				<button @onclick="ToggleForm">Dopyt</button>
			</div>
		</div>

		<br />

		<div class="row">
			<div class="col">
				<DemandForm @ref="demandForm" DemandedItemName="@Excavator.Name" />
			</div>
		</div>

		<div class="row">
			<div class="col">
				<p>Vlastnosti stroja:</p>
				<table class="table">
					<tbody>
						@foreach (var property in Excavator.Properties)
						{
							<tr>
								<td>@property.PropertyType.Name</td>
								<td>@property.Value</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<AuthorizeView Roles="Administrator">
			<button class="btn btn-secondary" @onclick="GoToExcavatorEditPage">Uprav</button>
		</AuthorizeView>
	</div>
}

@code {
	private DemandForm demandForm = null!;

	[Parameter]
	public int ExcavatorId { get; set; }

	private Excavator Excavator { get; set; } = null!;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		try
		{
			Excavator = await api.GetExcavatorAsync(ExcavatorId);
		}
		catch
		{
			throw new Exception($"Excavator with id '{ExcavatorId}' was not found.");
		}
	}

	public void ToggleForm()
	{
		demandForm.ToggleForm();
	}

	private List<byte[]> GetImages() => Excavator.Photos.Select(p => p.Photo).ToList();

	private void GoToExcavatorEditPage()
	{
		navMan.NavigateTo($"/admin/uprava-stroja/{Excavator.Id}");
	}
}