@page "/stroj/{Id:int}"

@inject IServISApi api
@using ServISWebApp.CssProviders

@if (Excavator != null && ExcavatorPhotos != null)
{
	<div class="container">
		<div class="row">
			<div class="col">
				<PhotoSlider Images="GetImages()" />
			</div>

			<div class="col">
				<h4>@Excavator.Name</h4>

				<p>@Excavator.Description</p>

				<button onclick="@ToggleForm">Dopyt</button>
			</div>
		</div>

		<br />

		<div hidden=@isFormHidden class="row">
			<div class="col">
				<EditForm @ref="Form" Model="Data" OnValidSubmit="SendFormData">
					<DataAnnotationsValidator />
					<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

					<label>Meno:</label>
					<InputText @bind-Value="@Data.Customer.Name" />
					<ValidationMessage For="@(() => Data.Customer.Name)" />

					<label>Priezvisko:</label>
					<InputText @bind-Value="@Data.Customer.Surname" />
					<ValidationMessage For="@(() => Data.Customer.Surname)" />

					<label>Telefónne číslo:</label>
					<InputText @bind-Value="@Data.Customer.PhoneNumber" />
					<ValidationMessage For="@(() => Data.Customer.PhoneNumber)" />

					<label>Email:</label>
					<InputText @bind-Value="@Data.Customer.Email" />
					<ValidationMessage For="@(() => Data.Customer.Email)" />

					<label>Mesto:</label>
					<InputText @bind-Value="@Data.Customer.Residence" />
					<ValidationMessage For="@(() => Data.Customer.Residence)" />

					<label>Správa:</label>
					<InputTextArea @bind-Value="@Data.Message" />

					<button class="btn btn-success" type="submit">Odoslať</button>
				</EditForm>

				<br />
			</div>
		</div>

		<div class="row">
			<div class="col">
				<table class="table">
					<tbody>
						@RenderExcavatorSpecificInfo()
					</tbody>
				</table>
			</div>
		</div>
	</div>
}

@code {
	private bool isFormHidden = true;

	private EditForm Form { get; set; } = null!;

	private FormFields Data { get; set; } = new();

	[Parameter]
	public int Id { get; set; }

	public Excavator Excavator { get; private set; } = null!;

	public List<ExcavatorPhoto> ExcavatorPhotos { get; private set; } = null!;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		ExcavatorPhotos = await api.GetExcavatorPhotosAsync(Id);
		if (ExcavatorPhotos == null || ExcavatorPhotos.Count == 0)
		{
			// possible TODO: place dummy "missing photo" photo instead of throwing error, so at least rest of the page could be displayed
			throw new Exception("No excavator photos.");
		}

		Excavator = ExcavatorPhotos[0].Excavator;
	}

	private void ToggleForm()
	{
		isFormHidden = !isFormHidden;

		StateHasChanged();
	}

	private void SendFormData()
	{
		//Data.Customer.Username = "";
		//Data.Customer.Password = "";
		Data.Customer.IsTemporary = true;
	}

	private class FormFields
	{
		public Customer Customer { get; set; } = new();
		public string Message { get; set; } = "";
	}

	private MarkupString RenderExcavatorSpecificInfo()
	{
		var excavatorType = Excavator.GetType();
		if (excavatorType == typeof(SkidSteerLoader))
		{
			return GetSkidSteerLoaderSpecificInfoMarkup((SkidSteerLoader)Excavator);
		}
		else if (excavatorType == typeof(TrackedExcavator))
		{
			return GetTrackedExcavatorSpecificInfoMarkup((TrackedExcavator)Excavator);
		}
		else if (excavatorType == typeof(TrackedLoader))
		{
			return GetTrackedLoaderSpecificInfoMarkup((TrackedLoader)Excavator);
		}
		else
		{
			throw new Exception("Cannot render excavator specific info because its type is unknown.");
		}
	}

	private static MarkupString GetSkidSteerLoaderSpecificInfoMarkup(SkidSteerLoader skidSteerLoader)
	{
		var skidSteerLoaderSpecificInfoMarkup = (MarkupString)$@"
		<tr>
			<td>Výška</td>
			<td>{skidSteerLoader.HeightMm} mm</td>\
		</tr>

		<tr>
			<td>Dĺžka s lopatou</td>
			<td>{skidSteerLoader.LengthWithBucketMm} mm</td>
		</tr>

		<tr>
			<td>Šírka s lopatou</td>
			<td>{skidSteerLoader.WidthWithBucketMm} mm</td>
		</tr>

		<tr>
			<td>Hmotnosť</td>
			<td>{skidSteerLoader.WeightKg} kg</td>
		</tr>

		<tr>
			<td>Nominálna nosnosť</td>
			<td>{skidSteerLoader.NominalLoadCapacityKg} kg</td>
		</tr>

		<tr>
			<td>Bod preťaženia</td>
			<td>{skidSteerLoader.OverloadPointKg} kg</td>
		</tr>

		<tr>
			<td>Maximálna rýchlosť</td>
			<td>{skidSteerLoader.TopSpeedKmh} km/h</td>
		</tr>

		<tr>
			<td>Maximálna rýchlosť (verzia SPEED)</td>
			<td>{skidSteerLoader.TopSpeedKmhSpeedVersionMin}-{skidSteerLoader.TopSpeedKmhSpeedVersionMax} km/h</td>
		</tr>

		<tr>
			<td>Navŕšený objem lopaty</td>
			<td>{skidSteerLoader.IncreasedBucketVolumeM3} m3</td>
		</tr>

		<tr>
			<td>Trhacia sila</td>
			<td>{skidSteerLoader.TearingStrengthKn} kN</td>
		</tr>

		<tr>
			<td>Ťažná sila</td>
			<td>{skidSteerLoader.TractionForceKn} kN</td>
		</tr>

		<tr>
			<td>Ťažná sila (verzia SPEED)</td>
			<td>{skidSteerLoader.TractionForceKnSpeedVersion} kN</td>
		</tr>

		<tr>
			<td>Zdvíhacia sila</td>
			<td>{skidSteerLoader.LiftingForceKn} kN</td>
		</tr>

		<tr>
			<td>Dosah</td>
			<td>{skidSteerLoader.ReachMm} mm</td>
		</tr>

		<tr>
			<td>Maximálna vysýpacia výška</td>
			<td>{skidSteerLoader.MaximumDischargeHeightMm} mm</td>
		</tr>

		<tr>
			<td>Typ motora</td>
			<td>{skidSteerLoader.EngineType}</td>
		</tr>

		<tr>
			<td>Menovitý výkon</td>
			<td>{skidSteerLoader.RatedPowerKw} kW</td>
		</tr>

		<tr>
			<td>Druh pohonu</td>
			<td>{skidSteerLoader.DriveType}</td>
		</tr>

		<tr>
			<td>Regulačný hydrogenerátor pohonu</td>
			<td>{skidSteerLoader.DriveControlHydrogenerator}</td>
		</tr>

		<tr>
			<td>Hydromotor pojazdu</td>
			<td>{skidSteerLoader.VehicleHydraulicMotor}</td>
		</tr>

		<tr>
			<td>Hydraulika pojazdu- pracovný tlak</td>
			<td>{skidSteerLoader.VehicleHydraulicMotorOperatingPressureMpa} MPa</td>
		</tr>

		<tr>
			<td>Druh ovládania</td>
			<td>{skidSteerLoader.ControlType}</td>
		</tr>

		<tr>
			<td>Pracovný tlak ovládania</td>
			<td>{skidSteerLoader.OperatingControlPressureMpa} MPa</td>
		</tr>

		<tr>
			<td>Riadenie</td>
			<td>{skidSteerLoader.Control}</td>
		</tr>

		<tr>
			<td>Hydrogenerátor pracovného zariadenia</td>
			<td>{skidSteerLoader.WorkEquipmentHydrogenerator}</td>
		</tr>

		<tr>
			<td>Rozvádzač pracovného zariadenia</td>
			<td>{skidSteerLoader.WorkEquipmentSwitchboard}</td>
		</tr>

		<tr>
			<td>Pracovný tlak</td>
			<td>{skidSteerLoader.OperatingPressureMpa} MPa</td>
		</tr>

		<tr>
			<td>Prietok pracovnej hydrauliky</td>
			<td>{skidSteerLoader.OperatingHydraulicFlowLpm} l/min</td>
		</tr>

		<tr>
			<td>Vyrovnávanie lopaty</td>
			<td>{skidSteerLoader.BucketLeveling}</td>
		</tr>

		<tr>
			<td>Výsledná hlučnosť akustického výkonu</td>
			<td>{skidSteerLoader.AcousticNoisePowerDb} dB</td>
		</tr>

		<tr>
			<td>Pneumatiky štandardné</td>
			<td>{skidSteerLoader.StandardTiresMin}-{skidSteerLoader.StandardTiresMax}</td>
		</tr>

		<tr>
			<td>Elektrická inštalácia</td>
			<td>{skidSteerLoader.ElectricalInstallationV} V</td>
		</tr>
		";

		return skidSteerLoaderSpecificInfoMarkup;
	}

	private static MarkupString GetTrackedExcavatorSpecificInfoMarkup(TrackedExcavator trackedExcavator)
	{
		var skidSteerLoaderSpecificInfoMarkup = (MarkupString)$@"
		<tr>
			<td>Pracovná hmotnosť</td>
			<td>{trackedExcavator.OperatingWeightKg} kg</td>
		</tr>

		<tr>
			<td>Hĺbka výkopu</td>
			<td>{trackedExcavator.ExcavationDepthMm} mm</td>
		</tr>

		<tr>
			<td>Maximálna šírka</td>
			<td>{trackedExcavator.MaximumWidthMm} mm</td>
		</tr>

		<tr>
			<td>Motor</td>
			<td>{trackedExcavator.Engine}</td>
		</tr>

		<tr>
			<td>Maximálny výkon (kw)</td>
			<td>{trackedExcavator.MaximumPowerKw} kw</td>
		</tr>

		<tr>
			<td>Trhacia sila</td>
			<td>{trackedExcavator.TearingStrengthKg} kg</td>
		</tr>

		<tr>
			<td>Sila vniknutia</td>
			<td>{trackedExcavator.PenetrationForceKg} kg</td>
		</tr>

		<tr>
			<td>Prietok hydrauliky</td>
			<td>{trackedExcavator.HydraulicFlowLpm} l/min</td>
		</tr>

		<tr>
			<td>Pracovný tlak</td>
			<td>{trackedExcavator.OperatingPressureBar} bar</td>
		</tr>
		";

		return skidSteerLoaderSpecificInfoMarkup;
	}

	private static MarkupString GetTrackedLoaderSpecificInfoMarkup(TrackedLoader trackedLoader)
	{
		var skidSteerLoaderSpecificInfoMarkup = (MarkupString)$@"
		<tr>
			<td>Pracovná hmotnosť</td>
			<td>{trackedLoader.OperatingWeightKg} kg</td>
		</tr>

		<tr>
			<td>Preklápacie zaťaženie</td>
			<td>{trackedLoader.TiltingLoadKg} kg</td>
		</tr>

		<tr>
			<td>Prevádzková nosnosť ISO 14397</td>
			<td>{trackedLoader.OperatingLoadCapacityIso14397Kg} kg</td>
		</tr>

		<tr>
			<td>Štandardný objem lopaty</td>
			<td>{trackedLoader.StandardBucketVolumeM3} m3</td>
		</tr>

		<tr>
			<td>Motor</td>
			<td>{trackedLoader.Engine}</td>
		</tr>

		<tr>
			<td>Maximálny výkon</td>
			<td>{trackedLoader.MaximumPowerKw} kW</td>
		</tr>

		<tr>
			<td>Šírka pásov</td>
			<td>{trackedLoader.TrackWidthMm} mm</td>
		</tr>

		<tr>
			<td>Trakčná sila</td>
			<td>{trackedLoader.TractionForceKn} kN</td>
		</tr>

		<tr>
			<td>Prietok hydrauliky (štandard)</td>
			<td>{trackedLoader.HydraulicFlowLpm} l/min</td>
		</tr>

		<tr>
			<td>Prietok hydrauliky (Hi-flow)</td>
			<td>{trackedLoader.HydraulicFlowHiFlowLpm} l/min</td>
		</tr>

		<tr>
			<td>Maximálny prevádzkový tlak</td>
			<td>{trackedLoader.MaximumOperatingPressureBar} bar</td>
		</tr>
		";

		return skidSteerLoaderSpecificInfoMarkup;
	}

	private List<byte[]> GetImages()
	{
		var images = new List<byte[]>(ExcavatorPhotos.Count);

		foreach (var excavatorPhoto in ExcavatorPhotos)
		{
			images.Add(excavatorPhoto.Photo);
		}

		return images;
	}
}