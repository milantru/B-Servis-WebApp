@page "/stroj/{ExcavatorId:int}"

@inject IServISApi api
@inject NavigationManager navMan
@using ServISWebApp.CssProviders

@if (Excavator != null)
{
	<div class="container">
		<div class="row">
			<div class="col">
				<PhotoSlider Images="GetImages()" />
			</div>

			<div class="col">
				<h4>@Excavator.Name</h4>

				<p>@Excavator.Description</p>

				<button @onclick="ToggleForm">Dopyt</button>
			</div>
		</div>

		<br />

		<div hidden=@isFormHidden class="row">
			<div class="col">
				<EditForm @ref="Form" Model="Data" OnValidSubmit="SendFormData">
					<DataAnnotationsValidator />
					<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

					<label>Meno:</label>
					<InputText @bind-Value="@Data.User.Name" />
					<ValidationMessage For="@(() => Data.User.Name)" />

					<label>Priezvisko:</label>
					<InputText @bind-Value="@Data.User.Surname" />
					<ValidationMessage For="@(() => Data.User.Surname)" />

					<label>Telefónne číslo:</label>
					<InputText @bind-Value="@Data.User.PhoneNumber" />
					<ValidationMessage For="@(() => Data.User.PhoneNumber)" />

					<label>Email:</label>
					<InputText @bind-Value="@Data.User.Email" />
					<ValidationMessage For="@(() => Data.User.Email)" />

					<label>Mesto:</label>
					<InputText @bind-Value="@Data.User.Residence" />
					<ValidationMessage For="@(() => Data.User.Residence)" />

					<label>Správa:</label>
					<InputTextArea @bind-Value="@Data.Message" />

					<SubmitButton Text="Odoslať" />
				</EditForm>

				<br />
			</div>
		</div>

		<div class="row">
			<div class="col">
				<p>Vlastnosti stroja:</p>
				<table class="table">
					<tbody>
						@foreach (var property in Excavator.Properties)
						{
							<tr>
								<td>@property.PropertyType.Name</td>
								<td>@property.Value</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>

		<AuthorizeView Roles="Administrator">
			<button class="btn btn-secondary" @onclick="GoToExcavatorEditPage">Uprav</button>
		</AuthorizeView>
	</div>
}

@code {
	private bool isFormHidden = true;

	[Parameter]
	public int ExcavatorId { get; set; }

	public Excavator Excavator { get; private set; } = null!;

	private EditForm Form { get; set; } = null!;

	private FormFields Data { get; set; } = new();

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		try
		{
			Excavator = await api.GetExcavatorAsync(ExcavatorId);
		}
		catch
		{
			throw new Exception($"Excavator with id '{ExcavatorId}' was not found.");
		}
	}

	private void ToggleForm()
	{
		isFormHidden = !isFormHidden;

		StateHasChanged();
	}

	private void SendFormData()
	{
		//Data.Customer.Username = "";
		//Data.Customer.Password = "";
		//Data.User.IsTemporary = true;
	}

	private class FormFields
	{
		public User User { get; set; } = new();
		public string Message { get; set; } = "";
	}

	private List<byte[]> GetImages() => Excavator.Photos.Select(p => p.Photo).ToList();

	private void GoToExcavatorEditPage()
	{
		navMan.NavigateTo($"/admin/uprava-stroja/{Excavator.Id}");
	}
}