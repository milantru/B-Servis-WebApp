@page "/profil"

@attribute [Authorize(Roles = "Administrator,User")]
@inject AuthenticationStateProvider authStateProvider
@inject IServISApi api
@inject IJSRuntime js
@using ServISWebApp.Auth
@using ServISWebApp.Components.Managements
@using ServISWebApp.CssProviders
@using ServISWebApp.Pages.Admin
@using System.Security.Claims
@using System.Text.Json

<h3>Profil</h3>

<TabControl>
	<AuthorizeView Roles="Administrator">
		<Authorized>
			<TabPage TabLabel="Náhradné diely">
				<SparePartsManagement />
			</TabPage>

			<TabPage TabLabel="Stroje">
				<ExcavatorsManagement />
			</TabPage>

			<TabPage TabLabel="Typy strojov">
				<ExcavatorTypesManagement />
			</TabPage>

			<TabPage TabLabel="Typy vlastností strojov">
				<ExcavatorPropertyTypesManagement />
			</TabPage>

			<TabPage TabLabel="Kategórie strojov">
				<ExcavatorCategoriesManagement />
			</TabPage>

			<TabPage TabLabel="Značky strojov">
				<ExcavatorBrandsManagement />
			</TabPage>

			<TabPage TabLabel="Kategórie prídavných zariadení">
				<AdditionalEquipmentCategoriesManagement />
			</TabPage>

			<TabPage TabLabel="Značky prídavných zariadení">
				<AdditionalEquipmentBrandsManagement />
			</TabPage>
		</Authorized>
	</AuthorizeView>
	<AuthorizeView>
		<TabPage TabLabel="Moje údaje">
			@if (User == null)
			{
				<p>Načítáva sa...</p>
			}
			else
			{
				<UserForm User="@User" OnSave="@(async () => await js.InvokeVoidAsync("alert", "Údaje úspešne zmenené."))" />
			}
		</TabPage>
	</AuthorizeView>
</TabControl>

@code {
	private User User { get; set; } = null!;

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var authState = await authStateProvider.GetAuthenticationStateAsync();

		int userId = 0;
		try
		{
			userId = int.Parse(
				authState.User.Claims.First(c => c.Type == ClaimTypes.PrimarySid).Value
			);

			User = await api.GetUserAsync(userId);
		}
		catch
		{
			throw new Exception($"Failed to load user with id '{userId}'.");
		}
	}
}
