@page "/profil"

@attribute [Authorize(Roles = "Administrator,User")]
@inject AuthenticationStateProvider authStateProvider
@inject IServISApi api
@using ServISWebApp.Auth
@using ServISWebApp.CssProviders
@using ServISWebApp.Pages.Admin
@using System.Security.Claims
@using System.Text.Json

<h3>Profil</h3>

<TabControl>
	<AuthorizeView Roles="Administrator">
		<Authorized>
			<TabPage TabLabel="Pridanie náhradného dielu">
				<SparePartManagement />
			</TabPage>
		</Authorized>
	</AuthorizeView>
	<AuthorizeView>
		<TabPage TabLabel="Moje údaje">
			<h4>Moje údaje</h4>

			@if (User == null)
			{
				<p>Chýbajú údaje.</p>
			}
			else
			{
				@* We need to specify Context="c" otherwise we get an error because AuthorizeView and EditForm use the same name for Context *@
				<EditForm Model="User" Context="c" OnValidSubmit="SaveUser">
					<DataAnnotationsValidator />
					<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

					<h5>Prihlasovacie údaje</h5>
					<div class="form-gorup">
						<label>Prihlasovacie meno</label>
						<InputText @bind-Value="@User.Username" />
						<ValidationMessage For="@(() => User.Username)" />

						<label>Heslo</label>
						<div style="position:relative;">
							<InputText @bind-Value="@User.Password" type="@(isPasswordVisible ? "text" : "password")" />
							<input class="toggle-password-visibility"
								   type="checkbox"
								   checked="@isPasswordVisible"
								   @onclick="() => isPasswordVisible = !isPasswordVisible" />
						</div>
						<ValidationMessage For="@(() => User.Password)" />
					</div>

					<br />

					<h5>Ostatné údaje</h5>
					<div class="form-gorup">
						<label>Krstné meno</label>
						<InputText @bind-Value="@User.Name" />
						<ValidationMessage For="@(() => User.Name)" />

						<label>Priezvisko</label>
						<InputText @bind-Value="@User.Surname" />
						<ValidationMessage For="@(() => User.Surname)" />

						<label>Telefónne číslo</label>
						<InputText @bind-Value="@User.PhoneNumber" />
						<ValidationMessage For="@(() => User.PhoneNumber)" />

						<label>Email</label>
						<InputText @bind-Value="@User.Email" />
						<ValidationMessage For="@(() => User.Email)" />

						<label>Mesto</label>
						<InputText @bind-Value="@User.Residence" />
						<ValidationMessage For="@(() => User.Residence)" />
					</div>

					<button class="btn btn-success" type="submit">Uložiť zmeny</button>
				</EditForm>
			}
		</TabPage>
	</AuthorizeView>
</TabControl>

@code {
	private bool isPasswordVisible;

	private User? User { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var authState = await authStateProvider.GetAuthenticationStateAsync();

		var userDataJson = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData)?.Value;
		if (userDataJson != null)
		{
			User = JsonSerializer.Deserialize<User>(userDataJson);
		}
	}

	private async Task SaveUser()
	{
		if (User == null)
		{
			throw new Exception("User missing, cannot save.");
		}

		await api.SaveUserAsync(User);

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(new UserSessionStorage(User));
	}
}
