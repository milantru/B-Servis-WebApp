@page "/profil"

@attribute [Authorize(Roles = "Administrator,User")]
@inject AuthenticationStateProvider authStateProvider
@inject IServISApi api
@inject IJSRuntime js
@using ServISWebApp.Auth
@using ServISWebApp.CssProviders
@using ServISWebApp.Pages.Admin
@using System.Security.Claims
@using System.Text.Json

<h3>Profil</h3>

<TabControl>
	<AuthorizeView Roles="Administrator">
		<Authorized>
			<TabPage TabLabel="Pridanie náhradného dielu">
				<SparePartManagement />
			</TabPage>

			<TabPage TabLabel="Typy vlastností strojov">
				<ExcavatorPropertyTypeManagement />
			</TabPage>
		</Authorized>
	</AuthorizeView>
	<AuthorizeView>
		<TabPage TabLabel="Moje údaje">
			<h4>Moje údaje</h4>

			@if (User == null)
			{
				<p>Chýbajú údaje.</p>
			}
			else
			{
				@* We need to specify Context="c" otherwise we get an error because AuthorizeView and EditForm use the same name for Context *@
				<EditForm Model="User" Context="c" OnValidSubmit="SaveUser">
					<DataAnnotationsValidator />
					<CustomCssClassProvider ProviderType="BootstrapFieldCssClassProvider" />

					<h5>Prihlasovacie údaje</h5>
					<div class="form-gorup">
						<label>Prihlasovacie meno</label>
						<InputText @bind-Value="@User.Username" />
						<ValidationMessage For="@(() => User.Username)" />

						<h6>Zmena hesla</h6>
						<div>
							<label>Staré heslo</label>
							<div style="position:relative;">
								<InputText @bind-Value="@oldPassword" type="@(isOldPasswordVisible ? "text" : "password")" />
								<input class="toggle-password-visibility"
								   type="checkbox"
								   checked="@isOldPasswordVisible"
								   @onclick="() => isOldPasswordVisible = !isOldPasswordVisible" />
							</div>

							<label>Nové heslo</label>
							<div style="position:relative;">
								<InputText @bind-Value="@newPassword" type="@(isNewPasswordVisible ? "text" : "password")" />
								<input class="toggle-password-visibility"
								   type="checkbox"
								   checked="@isNewPasswordVisible"
								   @onclick="() => isNewPasswordVisible = !isNewPasswordVisible" />
							</div>
						</div>
					</div>

					<br />

					<h5>Ostatné údaje</h5>
					<div class="form-gorup">
						<label>Krstné meno</label>
						<InputText @bind-Value="@User.Name" />
						<ValidationMessage For="@(() => User.Name)" />

						<label>Priezvisko</label>
						<InputText @bind-Value="@User.Surname" />
						<ValidationMessage For="@(() => User.Surname)" />

						<label>Telefónne číslo</label>
						<InputText @bind-Value="@User.PhoneNumber" />
						<ValidationMessage For="@(() => User.PhoneNumber)" />

						<label>Email</label>
						<InputText @bind-Value="@User.Email" />
						<ValidationMessage For="@(() => User.Email)" />

						<label>Mesto</label>
						<InputText @bind-Value="@User.Residence" />
						<ValidationMessage For="@(() => User.Residence)" />
					</div>

					<button class="btn btn-success" type="submit">Uložiť zmeny</button>
				</EditForm>
			}
		</TabPage>
	</AuthorizeView>
</TabControl>

@code {
	private string oldPassword = "";
	private string newPassword = "";
	private bool isOldPasswordVisible;
	private bool isNewPasswordVisible;

	private User? User { get; set; }

	protected override async Task OnInitializedAsync()
	{
		await base.OnInitializedAsync();

		var authState = await authStateProvider.GetAuthenticationStateAsync();

		var userDataJson = authState.User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.UserData)?.Value;
		if (userDataJson != null)
		{
			int? userId = JsonSerializer.Deserialize<User>(userDataJson)?.Id;
			if (userId.HasValue)
			{
				User = await api.GetUserAsync(userId.Value);
			}

		}
	}

	private async Task SaveUser()
	{
		if (User == null)
		{
			throw new Exception("User missing, cannot save.");
		}

		if (newPassword != "")
		{
			if (!PasswordHasher.AreCredentialsCorrect(User.Password, oldPassword))
			{
				await js.InvokeVoidAsync("alert", "Nemôžem uložiť- nesprávne heslo.");
				return;
			}
			User.Password = PasswordHasher.Hash(newPassword);
		}

		await api.SaveUserAsync(User);

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(new UserSessionStorage(User));

		await js.InvokeVoidAsync("alert", "Údaje úspešne zmenené.");
	}
}
