@page "/prihlasovanie"

@inject IServISApi api
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navMan
@using ServISWebApp.Auth

<EditForm Model="loginData" OnValidSubmit="Authenticate">
	<div class="text-center">
		<h3>Prihlásenie</h3>
	</div>

	<div>
		<label>Prihlasovacie meno</label>
		<InputText @bind-Value="@loginData.Username" />
	</div>

	<div>
		<label>Heslo</label>
		<InputText @bind-Value="@loginData.Password" type="@(isPasswordVisible ? "text" : "password")" />
		<input type="checkbox" checked="@isPasswordVisible" @onclick="() => isPasswordVisible = !isPasswordVisible" style="margin-left: -25px;" />
	</div>


	<button class="btn btn-success" type="submit">Prihlásiť</button>
</EditForm>

@code {
	private bool isPasswordVisible;
	private LoginData loginData = new();

	private async Task Authenticate()
	{
		User user;
		try
		{
			user = await api.GetUserAsync(loginData.Username);
		}
		catch
		{
			await js.InvokeVoidAsync("alert", "Užívateľ s takýmto menom neexistuje.");
			return;
		}

		if (!PasswordHasher.AreCredentialsCorrect(user.Password, loginData.Password))
		{
			await js.InvokeVoidAsync("alert", "Nesprávne heslo.");
			return;
		}

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
		await customAuthStateProvider.UpdateAuthenticationState(new UserSessionStorage(user));

		navMan.NavigateTo("/", true);
	}

	private class LoginData
	{
		public string Username { get; set; } = "";
		public string Password { get; set; } = "";
	}
}
