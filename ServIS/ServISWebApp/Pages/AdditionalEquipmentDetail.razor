@page "/pridavne-zariadenie/{AdditionalEquipmentId:int}"

@inject ILogger<AdditionalEquipmentDetail> logger
@inject IServISApi api
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navMan
@using ServISWebApp.Auth;

@if (additionalEquipmentExists && AdditionalEquipment != null)
{
	<div class="container">
		<AuthorizeView Roles="Administrator">
			<div class="w-100">
				<button class="btn btn-secondary" @onclick="GoToAdditionalEquipmentEditPage">Uprav</button>
			</div>
		</AuthorizeView>

		<div class="row img-and-desc-container">
			<div class="col img-container">
				<div class="img">
					<PhotoSlider Images="GetImages()" />
				</div>
			</div>

			<div class="col desc">
				<h4>@AdditionalEquipment.Name</h4>

				<p>@AdditionalEquipment.Description</p>

				@if (!isAdmin)
				{
					<button @onclick="ToggleForm">Dopyt</button>
				}
			</div>
		</div>

		<br />

		@if (!isAdmin)
		{
			<div class="row">
				<div class="col">
						<DemandForm @ref="demandForm" DemandedItemName="@AdditionalEquipment.Name" />
				</div>
			</div>
		}

		<div class="row">
			<div class="col">
				<table class="table">
					<tbody>
						<tr>
							<td>Pre bagre kategórie</td>
							<td>@AdditionalEquipment.ExcavatorCategory.Category</td>
						</tr>
						<tr>
							<td>Kategória</td>
							<td>@AdditionalEquipment.Category.Category</td>
						</tr>
						<tr>
							<td>Značka</td>
							<td>@AdditionalEquipment.Brand.Brand</td>
						</tr>
					</tbody>
				</table>
			</div>
		</div>
	</div>
}
else if (!additionalEquipmentExists)
{
	<p>Toto prídavné zariadenie neexistuje.</p>
}

@code {
	private bool isAdmin;
	private bool additionalEquipmentExists = true;
	private DemandForm demandForm = null!;

	[CascadingParameter]
	public Task<AuthenticationState> AuthenticationStateAsync { get; set; } = null!;

	[Parameter]
	public int AdditionalEquipmentId { get; set; }

	private AdditionalEquipment AdditionalEquipment { get; set; } = null!;

	protected override async Task OnParametersSetAsync()
	{
		await base.OnParametersSetAsync();

		await SetAdditionalEquipmentAsync();

		await CheckIfLoggedInAsAdminAsync();
	}

	public void ToggleForm()
	{
		demandForm.ToggleForm();
	}

	private List<byte[]> GetImages() => AdditionalEquipment.Photos.Select(p => p.Photo).ToList();

	private void GoToAdditionalEquipmentEditPage()
	{
		navMan.NavigateTo($"/admin/uprava-pridavneho-zariadenia/{AdditionalEquipment.Id}");
	}

	private async Task SetAdditionalEquipmentAsync()
	{
		try
		{
			AdditionalEquipment = await api.GetAdditionalEquipmentAsync(AdditionalEquipmentId);
		}
		catch (Exception ex)
		{
			logger.LogError(ex, $"AdditionalEquipment with id '{AdditionalEquipmentId}' was not found.");
			additionalEquipmentExists = false;
		}
	}

	private async Task CheckIfLoggedInAsAdminAsync()
	{
		var authState = await AuthenticationStateAsync;

		var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;

		isAdmin = await customAuthStateProvider.CheckIfLoggedInAsAdminAsync(authState);
	}
}
