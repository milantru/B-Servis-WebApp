using ServISData.DataOperations;
using ServISData.Models;

namespace ServISData.Interfaces
{
    /// <summary>
    /// Represents an interface for the ServIS API, providing various operations for different entities.
    /// </summary>
    public interface IServISApi
	{
        // ---------- Create/Update ----------

        /// <summary>
        /// Saves an excavator asynchronously.
        /// </summary>
        public Task<Excavator> SaveExcavatorAsync(Excavator excavator);

        /// <summary>
        /// Saves an excavator brand asynchronously.
        /// </summary>
        public Task<ExcavatorBrand> SaveExcavatorBrandAsync(ExcavatorBrand excavatorBrand);

        /// <summary>
        /// Saves an excavator category asynchronously.
        /// </summary>
        public Task<ExcavatorCategory> SaveExcavatorCategoryAsync(ExcavatorCategory excavatorCategory);

        /// <summary>
        /// Saves an excavator type asynchronously.
        /// </summary>
        public Task<ExcavatorType> SaveExcavatorTypeAsync(ExcavatorType excavatorType);

        /// <summary>
        /// Saves an excavator property type asynchronously.
        /// </summary>
        public Task<ExcavatorPropertyType> SaveExcavatorPropertyTypeAsync(ExcavatorPropertyType excavatorPropertyType);

        /// <summary>
        /// Saves a spare part asynchronously.
        /// </summary>
        public Task<SparePart> SaveSparePartAsync(SparePart sparePart);

        /// <summary>
        /// Saves a main offer asynchronously.
        /// </summary>
        public Task<MainOffer> SaveMainOfferAsync(MainOffer mainOffer);

        /// <summary>
        /// Saves an additional equipment asynchronously.
        /// </summary>
        public Task<AdditionalEquipment> SaveAdditionalEquipmentAsync(AdditionalEquipment additionalEquipment);

        /// <summary>
        /// Saves an additional equipment brand asynchronously.
        /// </summary>
        public Task<AdditionalEquipmentBrand> SaveAdditionalEquipmentBrandAsync(AdditionalEquipmentBrand additionalEquipmentBrand);

        /// <summary>
        /// Saves an additional equipment category asynchronously.
        /// </summary>
        public Task<AdditionalEquipmentCategory> SaveAdditionalEquipmentCategoryAsync(AdditionalEquipmentCategory additionalEquipmentCategory);

        /// <summary>
        /// Saves a user asynchronously.
        /// </summary>
        public Task<User> SaveUserAsync(User user);

        /// <summary>
        /// Saves an auction offer asynchronously.
        /// </summary>
        public Task<AuctionOffer> SaveAuctionOfferAsync(AuctionOffer auctionOffer);

        /// <summary>
        /// Saves an auction bid asynchronously.
        /// </summary>
        public Task<AuctionBid> SaveAuctionBidAsync(AuctionBid auctionBid);

        /// <summary>
        /// Saves an autogenerated message asynchronously.
        /// </summary>
        public Task<AutogeneratedMessage> SaveAutogeneratedMessageAsync(AutogeneratedMessage autogeneratedMessage);

        // ---------- Read ----------

        /// <summary>
        /// Gets a list of excavators asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<Excavator>> GetExcavatorsAsync(IDataOperations<Excavator>? dataOperations = null);

        /// <summary>
        /// Gets an excavator asynchronously by ID.
        /// </summary>
        public Task<Excavator> GetExcavatorAsync(int id);

        /// <summary>
        /// Gets the count of excavators asynchronously, optionally filtered by excavator type.
        /// </summary>
        public Task<int> GetExcavatorsCountAsync(ExcavatorType? type = null);

        /// <summary>
        /// Gets a list of photos of excavator with the specified ID asynchronously.
        /// </summary>
        public Task<List<ExcavatorPhoto>> GetExcavatorPhotosAsync(int excavatorId);

        /// <summary>
        /// Gets the count of excavator photos asynchronously.
        /// </summary>
        public Task<int> GetExcavatorPhotosCountAsync();

        /// <summary>
        /// Gets a list of excavator brands asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<ExcavatorBrand>> GetExcavatorBrandsAsync(IDataOperations<ExcavatorBrand>? dataOperations = null);

        /// <summary>
        /// Gets the count of excavator brands asynchronously.
        /// </summary>
        public Task<int> GetExcavatorBrandsCountAsync();

        /// <summary>
        /// Gets a list of excavator categories asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<ExcavatorCategory>> GetExcavatorCategoriesAsync(IDataOperations<ExcavatorCategory>? dataOperations = null);

        /// <summary>
        /// Gets the count of excavator categories asynchronously.
        /// </summary>
        public Task<int> GetExcavatorCategoriesCountAsync();

        /// <summary>
        /// Gets a list of excavator types asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<ExcavatorType>> GetExcavatorTypesAsync(IDataOperations<ExcavatorType>? dataOperations = null);

        /// <summary>
        /// Gets the count of excavator types asynchronously.
        /// </summary>
        public Task<int> GetExcavatorTypesCountAsync();

        /// <summary>
        /// Gets a list of excavator property types asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<ExcavatorPropertyType>> GetExcavatorPropertyTypesAsync(IDataOperations<ExcavatorPropertyType>? dataOperations = null);

        /// <summary>
        /// Gets the count of excavator property types asynchronously.
        /// </summary>
        public Task<int> GetExcavatorPropertyTypesCountAsync();

        /// <summary>
        /// Gets an excavator type asynchronously by ID.
        /// </summary>
        public Task<ExcavatorType> GetExcavatorTypeAsync(int id);

        /// <summary>
        /// Gets the title photo of an excavator with the specified ID asynchronously.
        /// </summary>
        public Task<ExcavatorPhoto> GetExcavatorTitlePhotoAsync(int excavatorId);

        /// <summary>
        /// Gets a list of spare parts asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<SparePart>> GetSparePartsAsync(IDataOperations<SparePart>? dataOperations = null);

        /// <summary>
        /// Gets a list of spare parts of excavator with the specified ID asynchronously.
        /// </summary>
        public Task<List<SparePart>> GetSparePartsAsync(int excavatorId);

        /// <summary>
        /// Gets the count of spare parts asynchronously.
        /// </summary>
        public Task<int> GetSparePartsCountAsync();

        /// <summary>
        /// Gets a spare part asynchronously by ID.
        /// </summary>
        public Task<SparePart> GetSparePartAsync(int id);

        /// <summary>
        /// Gets a list of main offers asynchronously.
        /// </summary>
        public Task<List<MainOffer>> GetMainOffersAsync();

        /// <summary>
        /// Gets a main offer asynchronously by ID.
        /// </summary>
        public Task<MainOffer> GetMainOfferAsync(int id);

        /// <summary>
        /// Gets a list of additional equipment asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<AdditionalEquipment>> GetAdditionalEquipmentsAsync(IDataOperations<AdditionalEquipment>? dataOperations = null);

        /// <summary>
        /// Gets an additional equipment asynchronously by ID.
        /// </summary>
        public Task<AdditionalEquipment> GetAdditionalEquipmentAsync(int id);

        /// <summary>
        /// Gets the count of additional equipment asynchronously.
        /// </summary>
        public Task<int> GetAdditionalEquipmentsCountAsync();

        /// <summary>
        /// Gets a list of photos of additional equipment with the specified ID asynchronously.
        /// </summary>
        public Task<List<AdditionalEquipmentPhoto>> GetAdditionalEquipmentPhotosAsync(int additionalEquipmentId);

        /// <summary>
        /// Gets the count of additional equipment photos asynchronously.
        /// </summary>
        public Task<int> GetAdditionalEquipmentPhotosCountAsync();

        /// <summary>
        /// Gets the title photo of an additional equipment with specified ID asynchronously.
        /// </summary>
        public Task<AdditionalEquipmentPhoto> GetAdditionalEquipmentTitlePhotoAsync(int additionalEquipmentId);

        /// <summary>
        /// Gets a list of additional equipment brands asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<AdditionalEquipmentBrand>> GetAdditionalEquipmentBrandsAsync(IDataOperations<AdditionalEquipmentBrand>? dataOperations = null);

        /// <summary>
        /// Gets the count of additional equipment brands asynchronously.
        /// </summary>
        public Task<int> GetAdditionalEquipmentBrandsCountAsync();

        /// <summary>
        /// Gets a list of additional equipment categories asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<AdditionalEquipmentCategory>> GetAdditionalEquipmentCategoriesAsync(IDataOperations<AdditionalEquipmentCategory>? dataOperations = null);

        /// <summary>
        /// Gets the count of additional equipment categories asynchronously.
        /// </summary>
        public Task<int> GetAdditionalEquipmentCategoriesCountAsync();

        /// <summary>
        /// Gets a user asynchronously by ID.
        /// </summary>
        public Task<User> GetUserAsync(int id);

        /// <summary>
        /// Gets a user asynchronously by username.
        /// </summary>
        /// <param name="username">The username of the user.</param>
        /// <returns>The user with the specified username; null if the user with the specified username doesn't exist.</returns>
        public Task<User?> GetUserAsync(string username);

        /// <summary>
        /// Gets a list of auction offers asynchronously, optionally applying data operations.
        /// </summary>
        public Task<List<AuctionOffer>> GetAuctionOffersAsync(IDataOperations<AuctionOffer>? dataOperations = null);

        /// <summary>
        /// Gets the count of auction offers asynchronously.
        /// </summary>
        public Task<int> GetAuctionOffersCountAsync();

        /// <summary>
        /// Gets an auction offer asynchronously by ID.
        /// </summary>
        public Task<AuctionOffer> GetAuctionOfferAsync(int id);

        /// <summary>
        /// Gets a list of auction bids for the auction offer with specified ID asynchronously.
        /// </summary>
        public Task<List<AuctionBid>> GetAuctionBidsAsync(int auctionOfferId);

        /// <summary>
        /// Gets an auction bid asynchronously by ID.
        /// </summary>
        public Task<AuctionBid> GetAuctionBidAsync(int id);

        /// <summary>
        /// Gets the count of auction bids asynchronously.
        /// </summary>
        public Task<int> GetAuctionBidsCountAsync();

        /// <summary>
        /// Gets the count of auction bidders that participated in auction offer with specified ID asynchronously.
        /// </summary>
        public Task<int> GetAuctionBiddersCountAsync(int auctionOfferId);

        /// <summary>
        /// Gets the auction bid with the highest offered amount of the auction offer with specified ID asynchronously.
        /// </summary>
        /// <returns>The auction bid with the highest amount, or null if no bid exists.</returns>
        public Task<AuctionBid?> GetMaxAuctionBidAsync(int auctionOfferId);

        /// <summary>
        /// Gets a list of auction bids which doesn't have the highest offered amount of the auction offer with specified ID asynchronously.
        /// </summary>
        public Task<List<AuctionBid>> GetLostAuctionBidsAsync(int auctionOfferId);

        /// <summary>
        /// Gets an autogenerated message by the <see cref="AutogeneratedMessage.For"/> value asynchronously.
        /// </summary>
        public Task<AutogeneratedMessage> GetAutogeneratedMessageAsync(AutogeneratedMessage.For forWhom);

        /// <summary>
        /// Gets a list of autogenerated messages asynchronously.
        /// </summary>
		public Task<List<AutogeneratedMessage>> GetAutogeneratedMessagesAsync();

        // ---------- Delete ----------

        /// <summary>
        /// Deletes an excavator asynchronously.
        /// </summary>
        public Task DeleteExcavatorAsync(Excavator excavator);

        /// <summary>
        /// Deletes an excavator photo asynchronously.
        /// </summary>
        public Task DeleteExcavatorPhotoAsync(ExcavatorPhoto excavatorPhoto);

        /// <summary>
        /// Deletes an excavator brand asynchronously.
        /// </summary>
        public Task DeleteExcavatorBrandAsync(ExcavatorBrand excavatorBrand);

        /// <summary>
        /// Deletes an excavator category asynchronously.
        /// </summary>
        public Task DeleteExcavatorCategoryAsync(ExcavatorCategory excavatorCategory);

        /// <summary>
        /// Deletes an excavator type asynchronously.
        /// </summary>
        public Task DeleteExcavatorTypeAsync(ExcavatorType excavatorType);

        /// <summary>
        /// Deletes an excavator property asynchronously.
        /// </summary>
        public Task DeleteExcavatorPropertyAsync(ExcavatorProperty excavatorProperty);

        /// <summary>
        /// Deletes an excavator property type asynchronously.
        /// </summary>
        public Task DeleteExcavatorPropertyTypeAsync(ExcavatorPropertyType excavatorPropertyType);

        /// <summary>
        /// Deletes a spare part asynchronously.
        /// </summary>
        public Task DeleteSparePartAsync(SparePart sparePart);

        /// <summary>
        /// Deletes a main offer asynchronously.
        /// </summary>
        public Task DeleteMainOfferAsync(MainOffer mainOffer);

        /// <summary>
        /// Deletes an additional equipment asynchronously.
        /// </summary>
        public Task DeleteAdditionalEquipmentAsync(AdditionalEquipment additionalEquipment);

        /// <summary>
        /// Deletes an additional equipment photo asynchronously.
        /// </summary>
        public Task DeleteAdditionalEquipmentPhotoAsync(AdditionalEquipmentPhoto additionalEquipmentPhoto);

        /// <summary>
        /// Deletes an additional equipment brand asynchronously.
        /// </summary>
        public Task DeleteAdditionalEquipmentBrandAsync(AdditionalEquipmentBrand additionalEquipmentBrand);

        /// <summary>
        /// Deletes an additional equipment category asynchronously.
        /// </summary>
        public Task DeleteAdditionalEquipmentCategoryAsync(AdditionalEquipmentCategory additionalEquipmentCategory);

        /// <summary>
        /// Deletes a user asynchronously.
        /// </summary>
        public Task DeleteUserAsync(User user);

        /// <summary>
        /// Deletes an auction offer asynchronously.
        /// </summary>
        public Task DeleteAuctionOfferAsync(AuctionOffer auctionOffer);

        /// <summary>
        /// Deletes an auction bid asynchronously.
        /// </summary>
        public Task DeleteAuctionBidAsync(AuctionBid auctionBid);

        /// <summary>
        /// Deletes an autogenerated message asynchronously.
        /// </summary>
        public Task DeleteAutogeneratedMessageAsync(AutogeneratedMessage autogeneratedMessage);
	}
}
